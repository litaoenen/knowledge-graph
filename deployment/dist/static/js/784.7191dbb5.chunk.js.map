{"version":3,"file":"static/js/784.7191dbb5.chunk.js","mappings":"sJAsBO,MAAMA,EAAgBC,UAC3B,MAAMC,GAAWC,EAAAA,EAAAA,IAAKC,GAChBC,EAAYH,EAASI,OAAOJ,EAASK,WAAW,IAGtD,OAFiBC,EAAAA,GAAMC,cAAcJ,GAErBK,KAAKC,IAAQ,CAC3BC,GAAID,EAAI,gBACRE,MAAOF,EAAU,KAEjBG,KAAMC,EAAYJ,EAAI,iBACtBK,WAAYC,OAAON,EAAuB,oBAAM,EAChDO,WAAYD,OAAON,EAAuB,oBAAM,EAChDQ,YAAaR,EAAiB,eAC7B,EAGQS,EAAuBnB,UAClC,MAAMC,GAAWC,EAAAA,EAAAA,IAAKC,GAChBC,EAAYH,EAASI,OAAOJ,EAASK,WAAW,IAGtD,OAFiBC,EAAAA,GAAMC,cAAcJ,GAErBK,KAAKC,IAAQ,CAC3BC,GAAID,EAAI,gBACRE,MAAOF,EAAU,KACjBU,KAAMV,EAAW,MAEjBG,KAAMC,EAAYJ,EAAI,iBACtBK,WAAYC,OAAON,EAAI,kBAAU,EACjCO,WAAYD,OAAON,EAAI,wBAAW,EAClCQ,YAAaR,EAAI,gBACjBW,IAAKX,EAAI,mBACR,EAGCI,EAAeH,IAEnB,OADeA,EAAGW,QAEhB,KAAK,EAAG,MAAO,UACf,KAAK,EAAG,MAAO,UACf,KAAK,EAAG,MAAO,aACf,KAAK,EAAG,MAAO,QAEf,QAAS,MAAO,SAClB,C,gICjCF,MAkTA,EA3SKC,IAAoE,IAAnE,KAAEC,EAAI,QAAEC,EAAO,YAAEC,EAAW,OAAEC,EAAM,UAAEC,EAAS,WAAEC,GAAYN,EACjE,MAAMO,GAAUC,EAAAA,EAAAA,QAAmB,OAC5BC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAwB,OACxD,OAAEK,IAAWC,EAAAA,EAAAA,KAGbC,EAAgBZ,EAClB,CAAEa,MAAO,UAAWC,SAAU,UAAWC,kBAAmB,IAC5D,CAAEF,MAAOlB,EAAKkB,MAAOC,SAAUnB,EAAKkB,MAAOE,kBAAmB,IAG5DC,EAAgC,cAAlBrB,EAAKsB,SAGNtB,EAAKuB,QAGxBC,EAAAA,EAAAA,YAAU,KAEJlB,EAAQmB,SAAWzB,EAAK0B,UAC1BpB,EAAQmB,QAAQC,SAASC,KAAK3B,EAAK0B,SACrC,GACC,KAGHF,EAAAA,EAAAA,YAAU,KAER,GAAIlB,EAAQmB,SAAWzB,EAAK0B,WAAalB,EACvC,IAEE,MAAMoB,EAAatB,EAAQmB,QAAQC,SAC7BG,EAAY7B,EAAK0B,SACNE,EAAWE,WAAWD,GAGxB,KAEbD,EAAWG,KAAKF,EAAW,GAE/B,CAAE,MAAOG,GACPC,QAAQC,MAAM,oDAAaF,GAC3BlB,EAAe,mDACjB,CACF,GACC,CAACd,EAAK0B,SAAUlB,IAkHnB,OAAIK,GAEAsB,EAAAA,EAAAA,MAAA,QAAMT,SAAU,CAAC1B,EAAK0B,SAASU,EAAGpC,EAAK0B,SAASW,EAAGrC,EAAK0B,SAASY,GAAGC,SAAA,EAClEC,EAAAA,EAAAA,KAAA,eAAaC,KAAM,CAACzC,EAAKuB,OAAQvB,EAAKuB,OAAQ,OAC9CiB,EAAAA,EAAAA,KAAA,qBAAmBtB,MAAM,gBAM7BiB,EAAAA,EAAAA,MAAA,SAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,QACEO,IAAKpC,EACLoB,SAAU,CAAC1B,EAAK0B,SAASU,EAAGpC,EAAK0B,SAASW,EAAGrC,EAAK0B,SAASY,GAC3DK,cAxGqBC,IACzB,IAAK,IAADC,EAAAC,EAAAC,EACFH,EAAEI,kBAEW,QAAbH,EAAAD,EAAEK,mBAAW,IAAAJ,GAAgB,QAAhBC,EAAbD,EAAeK,sBAAc,IAAAJ,GAA7BA,EAAAK,KAAAN,GAGA,MAAMO,EAAkC,QAAlBL,EAAGzC,EAAQmB,eAAO,IAAAsB,OAAA,EAAfA,EAAiBrB,SAAS2B,QACnD5C,GAAc,GAEVH,EAAQmB,SAAW2B,GACrBlD,EAAYF,EAAKb,GAAIiE,EAEzB,CAAE,MAAOpB,GACPC,QAAQC,MAAM,wCAAWF,GACzBlB,EAAe,uCACjB,GAyFIwC,cArFqBV,IACzB,GAAKtC,EAAQmB,SAAYmB,EAAEW,MAE3B,IAKE,GAHAX,EAAEI,kBAGgB,IAAdJ,EAAEY,QAAe,OAGrB,IAAKhD,EAEH,YADAC,GAAc,GAKhB,MAAMgD,EAAY,IAAIC,EAAAA,IACtBD,EAAUE,cAAcf,EAAEW,MAAOxC,GAGjC,MAAM6C,EAASvC,GAAe,EAAI,EAC5BwC,EAAQ,IAAIH,EAAAA,IAAY,IAAIA,EAAAA,IAAc,EAAG,EAAG,IAAKE,GACrDE,EAAe,IAAIJ,EAAAA,IAGzB,GAAID,EAAUM,IAAIC,eAAeH,EAAOC,GAAe,CAErD,MAAMlC,EAAatB,EAAQmB,QAAQC,SAInC,GAHiB,IAAIgC,EAAAA,IAAcI,EAAa1B,EAAG0B,EAAazB,EAAGT,EAAWU,GAAGR,WAAWF,GAG7E,GAAI,CAEjB,MAAMqC,EAAOrC,EAAWQ,EAAsC,IAAjC0B,EAAa1B,EAAIR,EAAWQ,GACnD8B,EAAOtC,EAAWS,EAAsC,IAAjCyB,EAAazB,EAAIT,EAAWS,GAEzD/B,EAAQmB,QAAQC,SAASU,EAAI6B,EAC7B3D,EAAQmB,QAAQC,SAASW,EAAI6B,EAE7B/D,EAAOH,EAAKb,GAAImB,EAAQmB,QAAQC,SAAS2B,QAC3C,CACF,CACF,CAAE,MAAOrB,GACPC,QAAQC,MAAM,wCAAWF,GACzBlB,EAAe,uCACjB,GAwCIqD,YApCmBvB,IACvB,IACEA,EAAEI,kBAEExC,GAEFC,GAAc,GACdL,EAAUJ,EAAKb,MAGf8C,QAAQmC,IAAI,4BAASpE,EAAKb,IAC1Bc,EAAQD,EAAKb,IAEjB,CAAE,MAAO6C,GACPC,QAAQC,MAAM,wCAAWF,GACzBlB,EAAe,uCACjB,GAqBIuD,eAhIsBzB,IAC1B,IACEA,EAAEI,kBACFpC,GAAe,GACf0D,SAASC,KAAKC,MAAMC,OAAS,SAC/B,CAAE,MAAOzC,GACPC,QAAQC,MAAM,wCAAWF,EAC3B,GA0HI0C,eAvHsB9B,IAC1B,IACEA,EAAEI,kBACFpC,GAAe,GACf0D,SAASC,KAAKC,MAAMC,OAAS,MAC/B,CAAE,MAAOzC,GACPC,QAAQC,MAAM,wCAAWF,EAC3B,GAgHuCO,SAAA,EAGnCC,EAAAA,EAAAA,KAAA,kBAAgBC,KAAM,CAACzC,EAAKuB,OAAQ,GAAI,OACxCiB,EAAAA,EAAAA,KAAA,2BAA0BvB,QAI5BuB,EAAAA,EAAAA,KAACmC,EAAAA,EAAS,CAACjD,SAAU,CAAC1B,EAAK0B,SAASU,EAAGpC,EAAK0B,SAASW,EAAGrC,EAAK0B,SAASY,GAAGC,UACvEC,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CACHlD,SAAU,CAAC,EAAiB,IAAd1B,EAAKuB,OAAc,GACjCsD,SAAU,GACV3D,MAAM,UACN4D,QAAQ,SACRC,QAAQ,SACRC,aAAc,GACdC,aAAa,UACbC,WAAW,OACXC,YAAa,EAAE5C,SAEdvC,EAAKZ,UAKTuB,IACC6B,EAAAA,EAAAA,KAAC4C,EAAAA,EAAI,CACH1D,SAAU,CAAC1B,EAAK0B,SAASU,EAAkB,IAAdpC,EAAKuB,OAAcvB,EAAK0B,SAASW,EAAkB,IAAdrC,EAAKuB,OAAcvB,EAAK0B,SAASY,GACnGkC,MAAO,CACLa,cAAe,OACfC,OAAQ,KAEVC,QAAQ,EACRC,eAAgB,EAChBC,UAAU,2BACVC,aAAa,GACbC,MAAO,EACPC,SAAS,EACTC,WAAS,EACTC,QAAM,EACNC,kBAAmBA,CAACC,EAAIjF,EAAQkF,IAEvB,CACLjG,EAAK0B,SAASU,EAAkB,IAAdpC,EAAKuB,OACvBvB,EAAK0B,SAASW,EAAkB,IAAdrC,EAAKuB,OACvBvB,EAAK0B,SAASY,GAEhBC,UAEFJ,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,sBAAqBlD,SAAA,EAElCJ,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,sBAAqBlD,SAAA,EAClCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,mBAAmBjB,MAAO,CAAE0B,gBAAiBlG,EAAKkB,SACjElB,EAAKZ,UAIR+C,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,uBAAsBlD,SAAA,EAEnCJ,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,SACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKb,SAI7CgD,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,mBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKX,WAI7C8C,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,+BACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAoB,cAAlBvC,EAAKsB,SAA2B,qBAAQ,2BAIhFa,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,yBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKP,YAAc,2BAI3D0C,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,mBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKT,YAAc,2BAI3D4C,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,mBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKH,KAAO,eAIpDsC,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,yBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKuC,SAASzC,aAItDqC,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAC,mBACrCC,EAAAA,EAAAA,KAAA,QAAMiD,UAAU,qBAAoBlD,SAAEvC,EAAKmG,WAAa,qBAAQ,0BAIjEnG,EAAKN,cACJyC,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,2BAA0BlD,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKiD,UAAU,qBAAoBlD,SAAC,mBACpCC,EAAAA,EAAAA,KAAA,OAAKiD,UAAU,qBAAoBlD,SAAEvC,EAAKN,2BAOhD,EC7IZ,EAjKKK,IAAmC,IAAlC,KAAEqG,EAAI,WAAE/F,GAAa,GAAON,EAChC,MAAOc,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAwB,MAE9D,IACE,IAAK0F,EAAKC,iBAAmBD,EAAKE,eAChC,MAAM,IAAIC,MAAM,8CAIlB,MAAMC,EAAQ,IAAI9C,EAAAA,IAAc0C,EAAKC,eAAejE,EAAGgE,EAAKC,eAAehE,EAAG+D,EAAKC,eAAe/D,GAC5FmE,EAAM,IAAI/C,EAAAA,IAAc0C,EAAKE,eAAelE,EAAGgE,EAAKE,eAAejE,EAAG+D,EAAKE,eAAehE,GAG1FoE,EAAmBC,KAAKC,IAAIJ,EAAMlE,EAAImE,EAAInE,GAAK,GAGtCkE,EAAM1E,WAAW2E,GAGhC,GAAIC,EAAkB,CAEpB,MAAMG,GAAW,IAAInD,EAAAA,KAAgBoD,WAAWN,EAAOC,GAAKM,aAAa,GAGnEC,EAAe,IAAItD,EAAAA,IACvBmD,EAASzE,EACTyE,EAASxE,EACT,GAWI4E,EAPQ,IAAIvD,EAAAA,IAChB8C,EACAQ,EACAP,GAImBS,UAAU,IACzBC,GAAe,IAAIzD,EAAAA,KAAuB0D,cAAcH,GAGxDI,GAAY,IAAI3D,EAAAA,KAAgB4D,WAAWb,EAAKD,GAAOe,YAE7D,OACEpF,EAAAA,EAAAA,MAAA,SAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,aAAWgF,OAAQ,IAAI9D,EAAAA,IACrByD,EACA,IAAIzD,EAAAA,IAAwB,CAC1BxC,MAAOb,EAAa,UAAY,UAChCoH,UAAW,EACXC,QAAS,GACTC,aAAa,OAKhBV,EAAOnH,OAAS,KACfqC,EAAAA,EAAAA,MAAA,QACET,SAAUuF,EAAO,IAAIW,UACrBjC,MAAO,GACPkC,SAAU,CAAC,EAAG,EAAGlB,KAAKmB,MAAMT,EAAUhF,EAAGgF,EAAUjF,IAAIG,SAAA,EAEvDC,EAAAA,EAAAA,KAAA,gBAAcC,KAAM,CAAC,GAAK,EAAG,MAC7BD,EAAAA,EAAAA,KAAA,qBAAmBtB,MAAOb,EAAa,UAAY,iBAK7D,CAAO,CAGL,MAAMgH,GAAY,IAAI3D,EAAAA,KAAgB4D,WAAWb,EAAKD,GAAOe,YACvDzH,EAAS0G,EAAM1E,WAAW2E,GAG1BI,GAAW,IAAInD,EAAAA,KAAgBoD,WAAWN,EAAOC,GAAKM,aAAa,GAGnEgB,EAAepB,KAAKqB,IAAI,EAAGlI,EAAS,IACpCmI,EAAgB,IAAIvE,EAAAA,KAAe2D,EAAUhF,EAAGgF,EAAUjF,EAAG,GAAGmF,YAIhEW,EAA2B,IAATpI,EAAgBiI,GADrBpB,KAAKwB,SAAW,GAAM,GAAK,GAIxCnB,EAAe,IAAItD,EAAAA,IACvBmD,EAASzE,EAAI6F,EAAc7F,EAAI8F,EAC/BrB,EAASxE,EAAI4F,EAAc5F,EAAI6F,EAC/BrB,EAASvE,GAAqB,GAAhBqE,KAAKwB,SAAiB,KAIhCC,EAAQ,IAAI1E,EAAAA,IAChB8C,EACAQ,EACAP,GAIIQ,EAASmB,EAAMlB,UAAU,IACzBC,GAAe,IAAIzD,EAAAA,KAAuB0D,cAAcH,GAGxDoB,EAAgBD,EAAME,SAAS,KAG/BC,EAAUH,EAAMI,WAAW,KAAMjB,YAEvC,OACEpF,EAAAA,EAAAA,MAAA,SAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,aAAWgF,OAAQ,IAAI9D,EAAAA,IACrByD,EACA,IAAIzD,EAAAA,IAAwB,CAC1BxC,MAAOb,EAAa,UAAY,UAChCoH,UAAW,EACXC,QAAS,GACTC,aAAa,QAKjBxF,EAAAA,EAAAA,MAAA,QACET,SAAU2G,EAAcT,UACxBjC,MAAO,GACPkC,SAAU,CAAClB,KAAK8B,GAAG,EAAG,EAAG9B,KAAKmB,MAAMS,EAAQlG,EAAGkG,EAAQnG,IAAIG,SAAA,EAE3DC,EAAAA,EAAAA,KAAA,gBAAcC,KAAM,CAAC,GAAK,EAAG,MAC7BD,EAAAA,EAAAA,KAAA,qBAAmBtB,MAAOb,EAAa,UAAY,iBAI3D,CACF,CAAE,MAAO6B,GAQP,GAPAD,QAAQC,MAAM,wCAAWA,GAEpBrB,GACHC,EAAeoB,aAAiBqE,MAAQrE,EAAMwG,QAAU,4BAItDtC,EAAKC,gBAAkBD,EAAKE,eAAgB,CAC9C,MAAME,EAAQ,IAAI9C,EAAAA,IAAc0C,EAAKC,eAAejE,EAAGgE,EAAKC,eAAehE,EAAG+D,EAAKC,eAAe/D,GAC5FmE,EAAM,IAAI/C,EAAAA,IAAc0C,EAAKE,eAAelE,EAAGgE,EAAKE,eAAejE,EAAG+D,EAAKE,eAAehE,GAE1F6E,GAAe,IAAIzD,EAAAA,KAAuB0D,cAAc,CAACZ,EAAOC,IAEtE,OACEjE,EAAAA,EAAAA,KAAA,aAAWgF,OAAQ,IAAI9D,EAAAA,IACrByD,EACA,IAAIzD,EAAAA,IAAwB,CAAExC,MAAO,UAAWuG,UAAW,MAGjE,CACF,CAGA,OAAO,IAAI,E,cCxLbkB,EAAAA,EAAAA,GAAO,CAAEC,cAAc,MAGvB,MAqHA,EArH2D7I,IAAmB,IAAlB,SAAEwC,GAAUxC,EACtE,MAAM,OAAEgB,EAAM,GAAE8H,IAAO7H,EAAAA,EAAAA,MAChBH,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAwB,MACxDoI,GAAcvI,EAAAA,EAAAA,QAA6B,MAqDjD,OAlDAiB,EAAAA,EAAAA,YAAU,KACR,IAEET,EAAOW,SAASqH,IAAI,EAAG,EAAG,IAC1BhI,EAAOiI,OAAO,EAAG,EAAG,GAEpB,MAAMC,EAAW,IAAIL,EAAAA,EAAc7H,EAAQ8H,EAAGK,YAC9CJ,EAAYrH,QAAUwH,EAGtBA,EAASE,SAAU,EACnBF,EAASG,eAAgB,EACzBH,EAASI,cAAgB,GACzBJ,EAASK,YAAc,GACvBL,EAASM,UAAY,EAGrBN,EAASO,YAAa,EAGtBP,EAASQ,oBAAqB,EAG9BR,EAASS,cAAgB,EACzBT,EAASU,cAAgBhD,KAAK8B,GAG9BQ,EAASW,YAAa,EAGtBX,EAASY,YAAc,EACvBZ,EAASa,YAAc,IAGvB,MAAMC,EAAUA,KACdC,sBAAsBD,GAClBd,GAAUA,EAASgB,QAAQ,EAIjC,OAFAF,IAEO,KACLd,EAASiB,SAAS,CAEtB,CAAE,MAAOlI,GACPC,QAAQC,MAAM,oDAAaF,GAC3BlB,EAAe,6CACjB,IACC,CAACC,EAAQ8H,IAGRhI,GAEAsB,EAAAA,EAAAA,MAAAgI,EAAAA,SAAA,CAAA5H,SAAA,EACEC,EAAAA,EAAAA,KAAA,gBAAc4H,UAAW,MACzB5H,EAAAA,EAAAA,KAAA,cAAYd,SAAU,CAAC,GAAI,GAAI,OAC/BS,EAAAA,EAAAA,MAAA,QAAMT,SAAU,CAAC,EAAG,EAAG,GAAGa,SAAA,EACxBC,EAAAA,EAAAA,KAAA,eAAaC,KAAM,CAAC,EAAG,EAAG,MAC1BD,EAAAA,EAAAA,KAAA,wBAAsBtB,MAAM,gBAE9BsB,EAAAA,EAAAA,KAAA,qBAMJL,EAAAA,EAAAA,MAAAgI,EAAAA,SAAA,CAAA5H,SAAA,EAEEC,EAAAA,EAAAA,KAAA,gBAAc4H,UAAW,MAGzB5H,EAAAA,EAAAA,KAAA,oBACEd,SAAU,CAAC,GAAI,GAAI,IACnB0I,UAAW,GACXC,YAAU,EACV,uBAAsB,KACtB,wBAAuB,QAIzB7H,EAAAA,EAAAA,KAAA,oBACEd,SAAU,EAAE,GAAI,GAAI,IACpB0I,UAAW,GACXlJ,MAAM,aAIRsB,EAAAA,EAAAA,KAAA,oBACEd,SAAU,CAAC,GAAI,IAAK,IACpB0I,UAAW,GACXlJ,MAAM,aAIRsB,EAAAA,EAAAA,KAAA,aACEd,SAAU,CAAC,EAAG,GAAI,GAClB4I,MAAO3D,KAAK8B,GAAK,EACjB8B,SAAU,GACVH,UAAW,GACXlJ,MAAM,UACNsJ,SAAU,MAIZhI,EAAAA,EAAAA,KAAA,SAAOiI,OAAO,aAAahI,KAAM,CAAC,aAGjCF,IACA,ECuZP,EA7e0BmI,KACxB,MAAOC,EAAgBC,IAAqBlK,EAAAA,EAAAA,UAA0B,KAC/DmK,EAAcC,IAAmBpK,EAAAA,EAAAA,UAAwB,KACzDqK,EAASC,IAActK,EAAAA,EAAAA,UAAmB,KAC1CuK,EAASC,IAAcxK,EAAAA,EAAAA,UAAmB,KAC1CyK,EAASC,IAAc1K,EAAAA,EAAAA,WAAS,IAChCwB,EAAOmJ,IAAY3K,EAAAA,EAAAA,UAAwB,OAC3C4K,EAAeC,IAAoB7K,EAAAA,EAAAA,UAAsB,IAAI8K,IAAI,CAAC,KAAM,SACxEC,EAAgBC,IAAqBhL,EAAAA,EAAAA,UAAwB,OAGpEc,EAAAA,EAAAA,YAAU,KACchD,WACpB,IACE4M,GAAW,GACXC,EAAS,MAGT,MAAMM,QAA0BC,MAAM,yBACtC,IAAKD,EAAkBE,GACrB,MAAM,IAAItF,MAAM,qEAElB,MAAMuF,QAA6BH,EAAkBI,cAC/CC,QAAsBzN,EAAAA,EAAAA,GAAcuN,GAC1C,IAAKE,GAA0C,IAAzBA,EAAclM,OAClC,MAAM,IAAIyG,MAAM,6FAElBqE,EAAkBoB,GAGlB,MAAMC,QAAwBL,MAAM,uBACpC,IAAKK,EAAgBJ,GACnB,MAAM,IAAItF,MAAM,qEAElB,MAAM2F,QAA2BD,EAAgBF,cAC3CI,QAAoBxM,EAAAA,EAAAA,GAAqBuM,GAC/C,IAAKC,GAAsC,IAAvBA,EAAYrM,OAC9B,MAAM,IAAIyG,MAAM,6FAElBuE,EAAgBqB,EAClB,CAAE,MAAOjK,GACPD,QAAQC,MAAM,8BAA+BA,GAC7CmJ,EAASnJ,aAAiBqE,MAAQrE,EAAMwG,QAAU,2BACpD,CAAC,QACC0C,GAAW,EACb,GAGFgB,EAAe,GACd,IAGH,MAAMC,EAAmBC,IACvBrK,QAAQmC,IAAI,4BAASkI,GAGrBZ,EAAkBY,GAGlBf,GAAiBgB,IACf,MAAMC,EAAS,IAAIhB,IAAIe,GAWvB,OARIC,EAAOC,IAAIH,IACbrK,QAAQmC,IAAI,4BAASkI,GACrBE,EAAOE,OAAOJ,KAEdrK,QAAQmC,IAAI,4BAASkI,GACrBE,EAAOG,IAAIL,IAGNE,CAAM,GACb,EAIEI,EAAkBA,CAACN,EAAgB5K,KACvCO,QAAQmC,IAAI,yCAAWkI,IAAU5K,EAAS,EAItCmL,EAAaA,CAACP,EAAgB5K,KAElCsJ,GAAW8B,GACFA,EAAM7N,KAAIe,IACf,GAAIA,EAAKb,KAAOmN,EACd,MAAO,IAAKtM,EAAM0B,SAAUA,EAAS2B,SAIvC,GAAIrD,EAAKb,GAAG4N,WAAWT,IAAWtM,EAAKb,KAAOmN,EAAQ,CAEpD,MAAMU,EAAeF,EAAMG,MAAKC,GAAKA,EAAE/N,KAAOmN,IAC9C,GAAIU,EAAc,CAEhB,MAAMG,EAAKzL,EAASU,EAAI4K,EAAatL,SAASU,EACxCgL,EAAK1L,EAASW,EAAI2K,EAAatL,SAASW,EAG9C,MAAO,IACFrC,EACH0B,SAAU,IAAIgC,EAAAA,IACZ1D,EAAK0B,SAASU,EAAI+K,EAClBnN,EAAK0B,SAASW,EAAI+K,EAClBpN,EAAK0B,SAASY,GAGpB,CACF,CAEA,OAAOtC,CAAI,MAKfqN,GAAa,EAITC,EAAiBhB,IACrBrK,QAAQmC,IAAI,yCAAWkI,IAAS,EAI5BiB,EAAgBA,CAACT,EAAwCxL,KAE7D,MAAMkM,EAAU,IAAIC,IAoDpB,OAjDAX,EAAMY,SAAQ1N,IACZ,MAAMqB,EAA2B,cAAbC,EAEdqM,EAAStM,GAAe,EAAI,EAGlC,IAAIH,EAAQ,UAEVA,EADEG,EACoB,YAAdrB,EAAKX,MAAoC,YAAdW,EAAKX,KAAqB,UAAY,UAGnD,YAAdW,EAAKX,MAAoC,YAAdW,EAAKX,KAAqB,UAAY,UAI3EmO,EAAQzE,IAAI/I,EAAKb,GAAI,IAChBa,EACHsB,WACAiB,SAAU,GACVb,SAAU,IAAIgC,EAAAA,IAAc,EAAG,EAAGiK,GAClCzM,QACAK,OAAQ,GAAiC,IAA1BvB,EAAKP,YAAc,IAClC0G,WAAYmF,EAAcmB,IAAIzM,EAAKb,KACnC,IAIJ2N,EAAMY,SAAQ1N,IACZ,GAAgB,OAAZA,EAAKb,IAA2B,OAAZa,EAAKb,GAAa,OAG1C,IAAIyO,EAAW,IACV5N,EAAKb,GAAG4N,WAAW,OAAS/M,EAAKb,GAAG4N,WAAW,QAAU/M,EAAKb,GAAGW,OAAS,IAC7E8N,EAAW5N,EAAKb,GAAG0O,MAAM,GAAI,GACZ,KAAbD,IACFA,EAAW5N,EAAKb,GAAG4N,WAAW,MAAQ,KAAO,OAKjD,MAAMe,EAAaN,EAAQO,IAAIH,GACzBI,EAAcR,EAAQO,IAAI/N,EAAKb,IAEjC2O,GAAcE,GAChBF,EAAWvL,SAAS0L,KAAKD,EAC3B,IAIKE,MAAMC,KAAKX,EAAQY,SAAS,EAI/BC,EAAkBA,CAACvB,EAAiBwB,KACxC,MAAMC,EAAmB,GAEnBC,EAAcA,CAACxO,EAAcyO,KAEjC,GAAgB,OAAZzO,EAAKb,IAA2B,OAAZa,EAAKb,IAAesP,EAAW,CACrDF,EAAON,KAAKjO,GAGZ,MAAMmG,EAAamI,EAAS7B,IAAIzM,EAAKb,IACrCa,EAAKuC,SAASmL,SAAQgB,IACpBF,EAAYE,EAAOD,GAAatI,EAAW,GAE/C,GAOF,OAHkB2G,EAAM6B,QAAO3O,GAAoB,OAAZA,EAAKb,IAA2B,OAAZa,EAAKb,KACtDuO,SAAQkB,GAAQJ,EAAYI,GAAM,KAErCL,CAAM,EAITM,EAAe/B,IAEnB,MAAMgC,EAAShC,EAAMG,MAAKjN,GAAoB,OAAZA,EAAKb,KACjC4P,EAASjC,EAAMG,MAAKjN,GAAoB,OAAZA,EAAKb,KAUnC2P,GACFA,EAAOpN,SAASqH,IARF,EACA,GACG,GASfgG,GACFA,EAAOrN,SAASqH,IAZF,EACA,EAEC,GAajB,MAAMiG,EAAiBA,CAAChP,EAAciP,EAAoBC,EAAoBC,EAAexB,KAC3F,GAA6B,IAAzB3N,EAAKuC,SAASzC,OAAc,OAGhC,MAAMsP,EAAYF,EAAalP,EAAKuC,SAASzC,OAGvCuP,EAAmB1I,KAAK2I,IAAI,EAAK3I,KAAKqB,IAAI,IAAKhI,EAAKuC,SAASzC,OAAS,IAE5EE,EAAKuC,SAASmL,SAAQ,CAACgB,EAAOa,KAC5B,IAAIhO,EAAS,EAEb,GAAc,IAAV4N,EAEF5N,EA1BiB,IA0B+B,GAAhBoF,KAAKwB,SAAiB,GAA3B,OACtB,CAEL5G,EA7BiB,IA6BU,EAAI,GAAM4N,EAAQE,GAG7C,MAAMG,EAA2B,IAATjO,EACxBA,GAAWoF,KAAKwB,SAAWqH,EAAkBA,EAAgB,CAC/D,CAGA,MAAMC,GAA+B,GAAhB9I,KAAKwB,SAAiB,KAAQiH,EAC7CM,EAAaT,EAAaM,EAAQH,EAAaA,EAAY,EAAKK,EAGhErN,EA7CM,EA6CQb,EAASoF,KAAKgJ,IAAID,GAChCrN,EA7CM,EA6CQd,EAASoF,KAAKiJ,IAAIF,GAChCG,EAA2B,GAAhBlJ,KAAKwB,SAAiB,GAGvCuG,EAAMhN,SAASqH,IAAI3G,EAAGC,EAAGsL,EAASkC,GAGlC,MAAMC,EAA8B,GAAZV,EACxBJ,EAAeN,EAAOgB,EAAaI,EAAgB,EAAGA,EAAiBX,EAAQ,EAAGxB,EAAO,GACzF,EAaJ,OATImB,GACFE,EAAeF,EAAQ,EAAG,EAAInI,KAAK8B,GAAI,GA1DtB,GA8DfsG,GACFC,EAAeD,EAAQ,EAAG,EAAIpI,KAAK8B,GAAI,EA9DxB,GAiEVqE,CAAK,EAIRiD,EAAejD,IACnB,MAAMkD,EAAkB,GA4BxB,OAzBAlD,EAAMY,SAAQ1N,IACZ,GAAgB,OAAZA,EAAKb,IAA2B,OAAZa,EAAKb,GAAa,OAG1C,IAAIyO,EAAW,IACV5N,EAAKb,GAAG4N,WAAW,OAAS/M,EAAKb,GAAG4N,WAAW,QAAU/M,EAAKb,GAAGW,OAAS,IAC7E8N,EAAW5N,EAAKb,GAAG0O,MAAM,GAAI,GACZ,KAAbD,IACFA,EAAW5N,EAAKb,GAAG4N,WAAW,MAAQ,KAAO,OAKjD,MAAMe,EAAahB,EAAMG,MAAKC,GAAKA,EAAE/N,KAAOyO,IAExCE,GACFkC,EAAM/B,KAAK,CACTgC,OAAQrC,EACRsC,OAAQlQ,EAAKb,GACbkH,eAAgByH,EAAWpM,SAC3B4E,eAAgBtG,EAAK0B,UAEzB,IAGKsO,CAAK,EAIR3C,EAAcA,KAClBnC,GAAW8E,GACFA,EAAM/Q,KAAImH,IACf,MAAM+J,EAAapF,EAAQkC,MAAKjN,GAAQA,EAAKb,KAAOiH,EAAK6J,SACnDG,EAAarF,EAAQkC,MAAKjN,GAAQA,EAAKb,KAAOiH,EAAK8J,SAEzD,OAAIC,GAAcC,EACT,IACFhK,EACHC,eAAgB8J,EAAWzO,SAC3B4E,eAAgB8J,EAAW1O,UAIxB0E,CAAI,KAEb,EAqEJ,OAjEA5E,EAAAA,EAAAA,YAAU,KACR,GAAI2J,GAAqC,IAA1BR,EAAe7K,QAAwC,IAAxB+K,EAAa/K,OAAc,OAGzE,MAIMuQ,EAAW,IAJK9C,EAAc5C,EAAgB,gBAChC4C,EAAc1C,EAAc,YAM1CyF,EAAejC,EAAgBgC,EAAU/E,GAGzCiF,EAAgB1B,EAAYyB,GAGlCtF,EAAWuF,GAGX,MAAMP,EAAQD,EAAYQ,GAC1BrF,EAAW8E,EAAM,GAGhB,CAACrF,EAAgBE,EAAcM,KAGlC3J,EAAAA,EAAAA,YAAU,KACR,GAAuB,IAAnBuJ,EAAQjL,SAAiB6K,EAAe7K,SAAW+K,EAAa/K,OAAQ,OAG5E,MAAM0Q,EAAcxG,uBAAsB,KACxC,IAEE,MAAMyG,EAAgBlD,EAAc5C,EAAgB,aAC9C+F,EAAcnD,EAAc1C,EAAc,WAG1CwF,EAAW,IAAII,KAAkBC,GAGjCJ,EAAejC,EAAgBgC,EAAU/E,GAGzCiF,EAAgB1B,EAAYyB,GAElCrO,QAAQmC,IAAI,4BAASmM,EAAczQ,OAAQ,4BAASoO,MAAMC,KAAK7C,IAG/DN,EAAWuF,GAGX,MAAMP,EAAQD,EAAYQ,GAC1BrF,EAAW8E,EACb,CAAE,MAAO9N,GACPD,QAAQC,MAAM,8CAAYA,EAC5B,KAIF,MAAO,IAAMyO,qBAAqBH,EAAY,GAG7C,CAAClF,EAAeX,EAAgBE,IAE/BM,GAEA3I,EAAAA,EAAAA,KAAA,OAAKgC,MAAO,CAAEoM,MAAO,OAAQC,OAAQ,OAAQC,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UAAWzO,UAC7GJ,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,oBAAmBlD,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKiD,UAAU,qBACfjD,EAAAA,EAAAA,KAAA,OAAAD,SAAK,+BAMTL,GAEAM,EAAAA,EAAAA,KAAA,OAAKgC,MAAO,CAAEoM,MAAO,OAAQC,OAAQ,OAAQC,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAU9P,MAAO,WAAYqB,UAC/HJ,EAAAA,EAAAA,MAAA,OAAKsD,UAAU,gBAAelD,SAAA,CAAC,iBAAKL,QAMxCC,EAAAA,EAAAA,MAAA,OAAKqC,MAAO,CAAEoM,MAAO,OAAQC,OAAQ,OAAQnP,SAAU,YAAaa,SAAA,EAClEC,EAAAA,EAAAA,KAACyO,EAAAA,GAAM,CACLlQ,OAAQ,CAAEW,SAAU,CAAC,EAAG,EAAG,IAAKwP,IAAK,IAAK3O,UAE1CC,EAAAA,EAAAA,KAAC2O,EAAS,CAAA5O,UAERJ,EAAAA,EAAAA,MAAA,SAAO0F,SAAU,CAAC,EAAG,EAAG,GAAGtF,SAAA,CAExBwI,EAAQ4D,QAAO3O,GAAQA,EAAK0B,UAAuC,kBAApB1B,EAAK0B,SAASU,IAAgBnD,KAAIe,IAChFwC,EAAAA,EAAAA,KAAC4O,EAAc,CAEbpR,KAAM,IACDA,EACHmG,WAAYmF,EAAcmB,IAAIzM,EAAKb,KAErCc,QAASoM,EACTnM,YAAa0M,EACbzM,OAAQ0M,EACRzM,UAAWkN,EACXjN,WAAYoL,IAAmBzL,EAAKb,IAT/Ba,EAAKb,MAcb8L,EAAQ0D,QAAOvI,GACdA,EAAKC,gBACLD,EAAKE,gBAC4B,kBAA1BF,EAAKC,eAAejE,GACM,kBAA1BgE,EAAKE,eAAelE,IAC3BnD,KAAImH,IACJ5D,EAAAA,EAAAA,KAAC6O,EAAc,CAEbjL,KAAMA,EACN/F,WAAYoL,IAAmBrF,EAAK6J,QAAUxE,IAAmBrF,EAAK8J,QAFjE,GAAG9J,EAAK6J,UAAU7J,EAAK8J,aAOhC1N,EAAAA,EAAAA,KAAA,aAAWgF,OAAQ,IAAI9D,EAAAA,KACrB,IAAIA,EAAAA,KAAuB0D,cAAc,CACvC,IAAI1D,EAAAA,IAAc,EAAG,GAAI,GACzB,IAAIA,EAAAA,IAAc,EAAG,EAAG,KAE1B,IAAIA,EAAAA,IAAwB,CAAExC,MAAO,UAAWwG,QAAS,GAAKC,aAAa,eAOnFxF,EAAAA,EAAAA,MAAA,OAAKqC,MAAO,CAAE9C,SAAU,WAAY4P,OAAQ,OAAQC,KAAM,OAAQC,QAAS,WAAYtL,gBAAiB,kBAAmBhF,MAAO,QAASuQ,aAAc,OAAQlP,SAAA,EAC/JJ,EAAAA,EAAAA,MAAA,OAAKqC,MAAO,CAAEsM,QAAS,OAAQC,WAAY,SAAUW,aAAc,OAAQnP,SAAA,EACzEC,EAAAA,EAAAA,KAAA,OAAKgC,MAAO,CAAEoM,MAAO,OAAQC,OAAQ,OAAQ3K,gBAAiB,UAAWyL,YAAa,MAAOF,aAAc,UAC3GjP,EAAAA,EAAAA,KAAA,QAAAD,SAAM,yDAERJ,EAAAA,EAAAA,MAAA,OAAKqC,MAAO,CAAEsM,QAAS,OAAQC,WAAY,UAAWxO,SAAA,EACpDC,EAAAA,EAAAA,KAAA,OAAKgC,MAAO,CAAEoM,MAAO,OAAQC,OAAQ,OAAQ3K,gBAAiB,UAAWyL,YAAa,MAAOF,aAAc,UAC3GjP,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4DAKVJ,EAAAA,EAAAA,MAAA,OAAKqC,MAAO,CAAE9C,SAAU,WAAYkQ,IAAK,OAAQC,MAAO,OAAQL,QAAS,WAAYtL,gBAAiB,kBAAmBhF,MAAO,QAASuQ,aAAc,OAAQlP,SAAA,EAC7JJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,6BAAOwI,EAAQjL,WACpBqC,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,mCAAQ+I,EAAcrF,QAC1BwF,IAAkBtJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,6BAAOkJ,UAE7B,C","sources":["utils/excelReader.ts","components/SafeNodeObject.tsx","components/SafeEdgeObject.tsx","components/SafeScene.tsx","Graph3D.tsx"],"sourcesContent":["import { read, utils } from 'xlsx';\n\nexport interface KnowledgeNode {\n  id: string;\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  difficulty: number;\n  importance: number;\n  description?: string;\n}\n\nexport interface AbilityNode {\n  id: string;\n  label: string;\n  name: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  tag?: string;\n}\n\nexport const readExcelFile = async (file: ArrayBuffer): Promise<KnowledgeNode[]> => {\n  const workbook = read(file);\n  const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  const jsonData = utils.sheet_to_json(worksheet);\n\n  return jsonData.map((row: any) => ({\n    id: row['编号'],\n    label: row['Name'],\n    // 根据编号长度判断类型\n    type: getNodeType(row['编号']),\n    difficulty: Number(row['Difficulty_degree']) || 0,\n    importance: Number(row['Importance_degree']) || 0,\n    description: row['Description']\n  }));\n};\n\nexport const readAbilityExcelFile = async (file: ArrayBuffer): Promise<AbilityNode[]> => {\n  const workbook = read(file);\n  const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  const jsonData = utils.sheet_to_json(worksheet);\n\n  return jsonData.map((row: any) => ({\n    id: row['编号'],\n    label: row['Name'],\n    name: row['Label'],\n    // 根据编号长度判断类型\n    type: getNodeType(row['编号']),\n    difficulty: Number(row['难度']) || 0,\n    importance: Number(row['重要性']) || 0,\n    description: row['描述'],\n    tag: row['标签']\n  }));\n};\n\nconst getNodeType = (id: string): KnowledgeNode['type'] => {\n  const length = id.length;\n  switch (length) {\n    case 2: return 'chapter';\n    case 4: return 'section';\n    case 6: return 'subsection';\n    case 8: return 'point';\n    case 10: return 'detail';\n    default: return 'detail';\n  }\n}; ","import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Text, Billboard, Html } from '@react-three/drei';\nimport '../styles/tooltip.css';\n\n// 扩展THREE.Event类型\ninterface Extended3DEvent extends THREE.Event {\n  point?: THREE.Vector2;\n  stopPropagation: () => void;\n  nativeEvent?: MouseEvent;\n  buttons?: number;\n}\n\n// 节点类型\ninterface Node3D {\n  id: string;\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  nodeType: 'knowledge' | 'ability';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  tag?: string;\n  position: THREE.Vector3;\n  color: string;\n  radius: number;\n  children: Node3D[];\n  isExpanded: boolean;\n}\n\n// 节点对象组件 - 移除了try-catch块以避免条件式钩子调用\nconst SafeNodeObject: React.FC<{\n  node: Node3D;\n  onClick: (id: string) => void;\n  onDragStart: (id: string, position: THREE.Vector3) => void;\n  onDrag: (id: string, position: THREE.Vector3) => void;\n  onDragEnd: (id: string) => void;\n  isSelected: boolean;\n}> = ({ node, onClick, onDragStart, onDrag, onDragEnd, isSelected }) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [renderError, setRenderError] = useState<string | null>(null);\n  const { camera } = useThree();\n  \n  // 节点材质 - 使用局部变量\n  const materialProps = isSelected \n    ? { color: '#FFD700', emissive: '#FF4500', emissiveIntensity: 0.5 }\n    : { color: node.color, emissive: node.color, emissiveIntensity: 0.2 };\n  \n  // 判断节点类型，设置不同的形状和旋转\n  const isKnowledge = node.nodeType === 'knowledge';\n  \n  // 节点高度，让节点有厚度\n  const nodeHeight = node.radius * 0.4;\n  \n  // 节点初始位置设置\n  useEffect(() => {\n    // 当组件挂载时，设置初始位置\n    if (meshRef.current && node.position) {\n      meshRef.current.position.copy(node.position);\n    }\n  }, []);  // 仅在组件挂载时执行\n  \n  // 更新节点位置 - 减少不必要的位置更新，避免闪烁\n  useEffect(() => {\n    // 只有当节点不处于拖拽状态时才更新位置\n    if (meshRef.current && node.position && !isDragging) {\n      try {\n        // 计算当前位置与目标位置的差距\n        const currentPos = meshRef.current.position;\n        const targetPos = node.position;\n        const distance = currentPos.distanceTo(targetPos);\n        \n        // 只有当位置差距大于阈值时才更新，避免微小抖动导致的闪烁\n        if (distance > 0.05) {\n          // 使用lerp进行平滑过渡，而不是直接设置位置\n          currentPos.lerp(targetPos, 0.3);\n        }\n      } catch (err) {\n        console.error(\"节点位置更新错误:\", err);\n        setRenderError(\"节点位置更新失败\");\n      }\n    }\n  }, [node.position, isDragging]);\n  \n  // 处理指针悬停事件\n  const handlePointerEnter = (e: Extended3DEvent) => {\n    try {\n      e.stopPropagation();\n      setShowTooltip(true);\n      document.body.style.cursor = 'pointer';\n    } catch (err) {\n      console.error(\"指针悬停错误:\", err);\n    }\n  };\n  \n  const handlePointerLeave = (e: Extended3DEvent) => {\n    try {\n      e.stopPropagation();\n      setShowTooltip(false);\n      document.body.style.cursor = 'auto';\n    } catch (err) {\n      console.error(\"指针离开错误:\", err);\n    }\n  };\n  \n  // 处理指针按下事件\n  const handlePointerDown = (e: Extended3DEvent) => {\n    try {\n      e.stopPropagation();\n      // 防止事件冒泡，避免多个节点同时响应事件\n      e.nativeEvent?.preventDefault?.();\n      \n      // 记录原始位置，用于判断是否发生了拖拽\n      const originalPosition = meshRef.current?.position.clone();\n      setIsDragging(false);\n      \n      if (meshRef.current && originalPosition) {\n        onDragStart(node.id, originalPosition);\n      }\n    } catch (err) {\n      console.error(\"节点点击错误:\", err);\n      setRenderError(\"节点交互失败\");\n    }\n  };\n  \n  // 处理指针移动事件 - 优化拖拽逻辑，防止位置跳跃\n  const handlePointerMove = (e: Extended3DEvent) => {\n    if (!meshRef.current || !e.point) return;\n    \n    try {\n      // 防止事件冒泡\n      e.stopPropagation();\n      \n      // 只有当鼠标按下时才响应移动\n      if (e.buttons !== 1) return;\n      \n      // 设置为拖拽状态，但首次移动不更新位置，避免突然跳跃\n      if (!isDragging) {\n        setIsDragging(true);\n        return;\n      }\n      \n      // 获取鼠标3D位置\n      const raycaster = new THREE.Raycaster();\n      raycaster.setFromCamera(e.point, camera);\n      \n      // 根据节点所在平面进行射线平面求交\n      const planeZ = isKnowledge ? -5 : 5;\n      const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -planeZ);\n      const intersection = new THREE.Vector3();\n      \n      // 检查射线是否与平面相交\n      if (raycaster.ray.intersectPlane(plane, intersection)) {\n        // 计算新位置和当前位置的距离\n        const currentPos = meshRef.current.position;\n        const distance = new THREE.Vector3(intersection.x, intersection.y, currentPos.z).distanceTo(currentPos);\n        \n        // 平滑过渡，避免位置突变 (限制单次移动距离)\n        if (distance < 10) {\n          // 更新位置 - 仅更新X和Y，保持Z不变\n          const newX = currentPos.x + (intersection.x - currentPos.x) * 0.5;\n          const newY = currentPos.y + (intersection.y - currentPos.y) * 0.5;\n          \n          meshRef.current.position.x = newX;\n          meshRef.current.position.y = newY;\n          \n          onDrag(node.id, meshRef.current.position.clone());\n        }\n      }\n    } catch (err) {\n      console.error(\"节点拖拽错误:\", err);\n      setRenderError(\"拖拽操作失败\");\n    }\n  };\n  \n  // 处理指针释放事件\n  const handlePointerUp = (e: Extended3DEvent) => {\n    try {\n      e.stopPropagation();\n      \n      if (isDragging) {\n        // 如果是拖拽操作，则结束拖拽\n        setIsDragging(false);\n        onDragEnd(node.id);\n      } else {\n        // 如果不是拖拽操作，则认为是点击\n        console.log(\"节点点击:\", node.id);\n        onClick(node.id);\n      }\n    } catch (err) {\n      console.error(\"节点释放错误:\", err);\n      setRenderError(\"节点操作失败\");\n    }\n  };\n  \n  // 如果出现渲染错误，返回简化的节点\n  if (renderError) {\n    return (\n      <mesh position={[node.position.x, node.position.y, node.position.z]}>\n        <boxGeometry args={[node.radius, node.radius, 0.1]} />\n        <meshBasicMaterial color=\"#ff0000\" />\n      </mesh>\n    );\n  }\n  \n  return (\n    <group>\n      <mesh \n        ref={meshRef}\n        position={[node.position.x, node.position.y, node.position.z]}\n        onPointerDown={handlePointerDown}\n        onPointerMove={handlePointerMove}\n        onPointerUp={handlePointerUp}\n        onPointerEnter={handlePointerEnter}\n        onPointerLeave={handlePointerLeave}\n      >\n        {/* 使用球体而不是圆柱体 */}\n        <sphereGeometry args={[node.radius, 32, 32]} />\n        <meshStandardMaterial {...materialProps} />\n      </mesh>\n      \n      {/* 还原节点标签样式 */}\n      <Billboard position={[node.position.x, node.position.y, node.position.z]}>\n        <Text\n          position={[0, node.radius * 1.2, 0]} // 恢复到节点上方\n          fontSize={0.6} // 恢复原来的大小\n          color=\"#ffffff\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n          outlineWidth={0.1} // 恢复原来的描边宽度\n          outlineColor=\"#000000\"\n          fontWeight=\"bold\"\n          renderOrder={2}\n        >\n          {node.label}\n        </Text>\n      </Billboard>\n      \n      {/* 调整提示框尺寸和位置 */}\n      {showTooltip && (\n        <Html \n          position={[node.position.x + node.radius * 1.5, node.position.y + node.radius * 1.5, node.position.z]} // 保持右上角位置\n          style={{\n            pointerEvents: 'none',\n            zIndex: 10000\n          }}\n          center={false}\n          distanceFactor={0} // 保持为0确保固定大小\n          className=\"tooltip-container-static\"\n          wrapperClass=\"\"\n          scale={1} // 重置为1，使用CSS控制大小\n          occlude={false}\n          transform\n          sprite\n          calculatePosition={(el, camera, size) => {\n            // 保持固定位置\n            return [\n              node.position.x + node.radius * 1.5, \n              node.position.y + node.radius * 1.5, \n              node.position.z\n            ];\n          }}\n        >\n          <div className=\"drei-tooltip-static\">\n            {/* 提示框标题 */}\n            <div className=\"drei-tooltip-header\">\n              <span className=\"drei-tooltip-dot\" style={{ backgroundColor: node.color }}></span>\n              {node.label}\n            </div>\n            \n            {/* 提示框内容 - 完整版 */}\n            <div className=\"drei-tooltip-content\">\n              {/* ID */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">ID:</span>\n                <span className=\"drei-tooltip-value\">{node.id}</span>\n              </div>\n              \n              {/* 类型 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">类型:</span>\n                <span className=\"drei-tooltip-value\">{node.type}</span>\n              </div>\n              \n              {/* 节点类型 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">节点类型:</span>\n                <span className=\"drei-tooltip-value\">{node.nodeType === 'knowledge' ? '知识点' : '能力点'}</span>\n              </div>\n              \n              {/* 重要性 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">重要性:</span>\n                <span className=\"drei-tooltip-value\">{node.importance || '未设置'}</span>\n              </div>\n              \n              {/* 难度 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">难度:</span>\n                <span className=\"drei-tooltip-value\">{node.difficulty || '未设置'}</span>\n              </div>\n              \n              {/* 标签 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">标签:</span>\n                <span className=\"drei-tooltip-value\">{node.tag || '无'}</span>\n              </div>\n              \n              {/* 子节点 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">子节点:</span>\n                <span className=\"drei-tooltip-value\">{node.children.length}</span>\n              </div>\n              \n              {/* 状态 */}\n              <div className=\"drei-tooltip-item\">\n                <span className=\"drei-tooltip-label\">状态:</span>\n                <span className=\"drei-tooltip-value\">{node.isExpanded ? '已展开' : '已收起'}</span>\n              </div>\n              \n              {/* 描述 */}\n              {node.description && (\n                <div className=\"drei-tooltip-description\">\n                  <div className=\"drei-tooltip-label\">描述:</div>\n                  <div className=\"drei-tooltip-value\">{node.description}</div>\n                </div>\n              )}\n            </div>\n          </div>\n        </Html>\n      )}\n    </group>\n  );\n};\n\nexport default SafeNodeObject; ","import React, { useState } from 'react';\nimport * as THREE from 'three';\n\n// 使用与Graph3D.tsx相同的接口定义\ninterface Node3D {\n  id: string;\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  nodeType: 'knowledge' | 'ability';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  tag?: string;\n  position: THREE.Vector3;\n  color: string;\n  radius: number;\n  children: Node3D[];\n  isExpanded: boolean;\n}\n\n// 边类型\ninterface Edge3D {\n  source: string;\n  target: string;\n  sourcePosition: THREE.Vector3;\n  targetPosition: THREE.Vector3;\n}\n\n// 安全的边对象组件\nconst SafeEdgeObject: React.FC<{\n  edge: Edge3D;\n  isSelected?: boolean;\n}> = ({ edge, isSelected = false }) => {\n  const [renderError, setRenderError] = useState<string | null>(null);\n  \n  try {\n    if (!edge.sourcePosition || !edge.targetPosition) {\n      throw new Error(\"无效的边缘数据\");\n    }\n    \n    // 获取源节点和目标节点的位置\n    const start = new THREE.Vector3(edge.sourcePosition.x, edge.sourcePosition.y, edge.sourcePosition.z);\n    const end = new THREE.Vector3(edge.targetPosition.x, edge.targetPosition.y, edge.targetPosition.z);\n    \n    // 如果源节点和目标节点在不同的平面上，则需要调整连线方式\n    const isDifferentPlane = Math.abs(start.z - end.z) > 20;\n    \n    // 计算连线长度\n    const length = start.distanceTo(end);\n    \n    // 如果是不同平面的节点，需要使用曲线连接\n    if (isDifferentPlane) {\n      // 构建贝塞尔曲线路径\n      const midPoint = new THREE.Vector3().addVectors(start, end).divideScalar(2);\n      \n      // 控制点位于两个平面的中间\n      const controlPoint = new THREE.Vector3(\n        midPoint.x,\n        midPoint.y,\n        0 // 控制点放在Z=0的中间层\n      );\n\n      // 创建曲线路径\n      const curve = new THREE.QuadraticBezierCurve3(\n        start,\n        controlPoint,\n        end\n      );\n      \n      // 创建曲线几何体\n      const points = curve.getPoints(50);\n      const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n      \n      // 获取从起点到终点的方向向量\n      const direction = new THREE.Vector3().subVectors(end, start).normalize();\n\n      return (\n        <group>\n          <primitive object={new THREE.Line(\n            lineGeometry,\n            new THREE.LineBasicMaterial({ \n              color: isSelected ? \"#ffcc00\" : \"#aaaaaa\",\n              linewidth: 2,\n              opacity: 0.8,\n              transparent: true\n            })\n          )} />\n          \n          {/* 添加箭头指示方向 */}\n          {points.length > 30 && (\n            <mesh \n              position={points[30].toArray()} \n              scale={0.2}\n              rotation={[0, 0, Math.atan2(direction.y, direction.x)]}\n            >\n              <coneGeometry args={[0.5, 1, 8]} />\n              <meshBasicMaterial color={isSelected ? \"#ffcc00\" : \"#aaaaaa\"} />\n            </mesh>\n          )}\n        </group>\n      );\n    } else {\n      // 相同平面上的节点也使用曲线连接，但曲率更小\n      // 计算边缘的方向和长度\n      const direction = new THREE.Vector3().subVectors(end, start).normalize();\n      const length = start.distanceTo(end);\n      \n      // 使用二次贝塞尔曲线连接相同平面的节点\n      const midPoint = new THREE.Vector3().addVectors(start, end).divideScalar(2);\n      \n      // 根据连线长度动态调整控制点偏移量\n      const offsetFactor = Math.min(1, length / 15); // 连线越长，偏移越明显，但有上限\n      const perpendicular = new THREE.Vector3(-direction.y, direction.x, 0).normalize();\n      \n      // 添加随机性，使相邻连线错开\n      const randomSign = Math.random() > 0.5 ? 1 : -1;\n      const offsetMagnitude = length * 0.25 * offsetFactor * randomSign; // 偏移量为线长的25%\n      \n      // 控制点沿垂直于连线方向偏移\n      const controlPoint = new THREE.Vector3(\n        midPoint.x + perpendicular.x * offsetMagnitude,\n        midPoint.y + perpendicular.y * offsetMagnitude,\n        midPoint.z + (Math.random() * 0.4 - 0.2) // 小幅Z轴随机偏移\n      );\n      \n      // 创建曲线路径\n      const curve = new THREE.QuadraticBezierCurve3(\n        start,\n        controlPoint,\n        end\n      );\n      \n      // 创建曲线几何体\n      const points = curve.getPoints(50);\n      const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n      \n      // 计算箭头位置点（在曲线3/4位置）\n      const arrowPosition = curve.getPoint(0.75);\n      \n      // 计算该点的切线方向作为箭头朝向\n      const tangent = curve.getTangent(0.75).normalize();\n      \n      return (\n        <group>\n          <primitive object={new THREE.Line(\n            lineGeometry,\n            new THREE.LineBasicMaterial({ \n              color: isSelected ? \"#ffcc00\" : \"#aaaaaa\",\n              linewidth: 2,\n              opacity: 0.8,\n              transparent: true\n            })\n          )} />\n          \n          {/* 添加箭头指示方向 */}\n          <mesh \n            position={arrowPosition.toArray()}\n            scale={0.2}\n            rotation={[Math.PI/2, 0, Math.atan2(tangent.y, tangent.x)]}\n          >\n            <coneGeometry args={[0.5, 1, 8]} />\n            <meshBasicMaterial color={isSelected ? \"#ffcc00\" : \"#aaaaaa\"} />\n          </mesh>\n        </group>\n      );\n    }\n  } catch (error) {\n    console.error(\"边缘渲染错误:\", error);\n    \n    if (!renderError) {\n      setRenderError(error instanceof Error ? error.message : \"未知错误\");\n    }\n    \n    // 渲染一个简单的红色线条作为回退\n    if (edge.sourcePosition && edge.targetPosition) {\n      const start = new THREE.Vector3(edge.sourcePosition.x, edge.sourcePosition.y, edge.sourcePosition.z);\n      const end = new THREE.Vector3(edge.targetPosition.x, edge.targetPosition.y, edge.targetPosition.z);\n      \n      const lineGeometry = new THREE.BufferGeometry().setFromPoints([start, end]);\n      \n      return (\n        <primitive object={new THREE.Line(\n          lineGeometry,\n          new THREE.LineBasicMaterial({ color: \"#ff0000\", linewidth: 1 })\n        )} />\n      );\n    }\n  }\n  \n  // 如果一切都失败了，返回null\n  return null;\n};\n\nexport default SafeEdgeObject; ","import React, { useState, useEffect, useRef } from 'react';\nimport { useThree, extend } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as THREE from 'three';\n\n// 扩展OrbitControls以便在React中使用\nextend({ OrbitControls });\n\n// 安全场景组件，包含灯光、控制器等\nconst SafeScene: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { camera, gl } = useThree();\n  const [renderError, setRenderError] = useState<string | null>(null);\n  const controlsRef = useRef<OrbitControls | null>(null);\n  \n  // 初始化控制器\n  useEffect(() => {\n    try {\n      // 确保相机处于正确的位置和方向\n      camera.position.set(0, 0, 50);\n      camera.lookAt(0, 0, 0);\n      \n      const controls = new OrbitControls(camera, gl.domElement);\n      controlsRef.current = controls;\n      \n      // 启用控制，但保留一些限制\n      controls.enabled = true; // 启用控制\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.1;\n      controls.rotateSpeed = 0.8; // 增加旋转速度\n      controls.zoomSpeed = 1.0; // 设置默认缩放速度\n      \n      // 使用默认的缩放行为\n      controls.enableZoom = true;\n      \n      // 设置以鼠标位置为中心的缩放\n      controls.screenSpacePanning = true;\n      \n      // 扩大视角范围，允许从更多角度观察\n      controls.minPolarAngle = 0; // 从正上方开始\n      controls.maxPolarAngle = Math.PI; // 到正下方\n      \n      // 关闭自动旋转\n      controls.autoRotate = false;\n      \n      // 扩大距离限制\n      controls.minDistance = 5; // 减小最小距离以便更近查看\n      controls.maxDistance = 200; // 保持最大距离不变\n      \n      // 更新循环\n      const animate = () => {\n        requestAnimationFrame(animate);\n        if (controls) controls.update();\n      };\n      animate();\n      \n      return () => {\n        controls.dispose();\n      };\n    } catch (err) {\n      console.error(\"控制器初始化错误:\", err);\n      setRenderError(\"场景初始化失败\");\n    }\n  }, [camera, gl]);\n  \n  // 如果出现渲染错误，返回简化的场景\n  if (renderError) {\n    return (\n      <>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <mesh position={[0, 0, 0]}>\n          <boxGeometry args={[1, 1, 1]} />\n          <meshStandardMaterial color=\"#ff0000\" />\n        </mesh>\n        <gridHelper />\n      </>\n    );\n  }\n  \n  return (\n    <>\n      {/* 环境光 */}\n      <ambientLight intensity={0.5} />\n      \n      {/* 主光源 - 从正上方照射 */}\n      <directionalLight \n        position={[10, 40, 30]} \n        intensity={0.8} \n        castShadow \n        shadow-mapSize-width={1024} \n        shadow-mapSize-height={1024}\n      />\n      \n      {/* 辅助光源 - 从侧面照射，增加立体感 */}\n      <directionalLight \n        position={[-20, 10, 20]} \n        intensity={0.4} \n        color=\"#aabbff\"\n      />\n      \n      {/* 背面补光 */}\n      <directionalLight\n        position={[0, -10, -30]}\n        intensity={0.3}\n        color=\"#ffeecc\"\n      />\n      \n      {/* 顶面专用光源 */}\n      <spotLight\n        position={[0, 30, 0]}\n        angle={Math.PI / 3}\n        penumbra={0.2}\n        intensity={0.5}\n        color=\"#ffffff\"\n        distance={60}\n      />\n      \n      {/* 添加背景色 - 使用浅色背景 */}\n      <color attach=\"background\" args={['#f5f5f5']} />\n      \n      {/* 渲染子组件 */}\n      {children}\n    </>\n  );\n};\n\nexport default SafeScene; ","import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { Canvas } from '@react-three/fiber';\nimport { KnowledgeNode, AbilityNode, readExcelFile, readAbilityExcelFile } from './utils/excelReader';\n\n// 导入安全组件\nimport SafeNodeObject from './components/SafeNodeObject';\nimport SafeEdgeObject from './components/SafeEdgeObject';\nimport SafeScene from './components/SafeScene';\n\n// 节点类型，扩展以支持3D位置\ninterface Node3D {\n  id: string;\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  nodeType: 'knowledge' | 'ability';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  tag?: string;\n  position: THREE.Vector3;\n  color: string;\n  radius: number;\n  children: Node3D[];\n  isExpanded: boolean;\n}\n\n// 边类型\ninterface Edge3D {\n  source: string;\n  target: string;\n  sourcePosition: THREE.Vector3;\n  targetPosition: THREE.Vector3;\n}\n\n// 主图谱组件\nconst Graph3D: React.FC = () => {\n  const [knowledgeNodes, setKnowledgeNodes] = useState<KnowledgeNode[]>([]);\n  const [abilityNodes, setAbilityNodes] = useState<AbilityNode[]>([]);\n  const [nodes3D, setNodes3D] = useState<Node3D[]>([]);\n  const [edges3D, setEdges3D] = useState<Edge3D[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set(['DS', 'AB']));\n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);\n  \n  // 加载Excel数据\n  useEffect(() => {\n    const loadExcelData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // 加载知识图谱数据\n        const knowledgeResponse = await fetch('/knowledge_graph.xlsx');\n        if (!knowledgeResponse.ok) {\n          throw new Error('知识图谱Excel文件加载失败');\n        }\n        const knowledgeArrayBuffer = await knowledgeResponse.arrayBuffer();\n        const knowledgeData = await readExcelFile(knowledgeArrayBuffer);\n        if (!knowledgeData || knowledgeData.length === 0) {\n          throw new Error('知识图谱Excel文件为空或格式不正确');\n        }\n        setKnowledgeNodes(knowledgeData);\n        \n        // 加载能力图谱数据\n        const abilityResponse = await fetch('/ability_graph.xlsx');\n        if (!abilityResponse.ok) {\n          throw new Error('能力图谱Excel文件加载失败');\n        }\n        const abilityArrayBuffer = await abilityResponse.arrayBuffer();\n        const abilityData = await readAbilityExcelFile(abilityArrayBuffer);\n        if (!abilityData || abilityData.length === 0) {\n          throw new Error('能力图谱Excel文件为空或格式不正确');\n        }\n        setAbilityNodes(abilityData);\n      } catch (error) {\n        console.error('Failed to load Excel files:', error);\n        setError(error instanceof Error ? error.message : '未知错误');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadExcelData();\n  }, []);\n  \n  // 处理节点点击 - 展开/收起\n  const handleNodeClick = (nodeId: string) => {\n    console.log(\"节点点击:\", nodeId);\n    \n    // 立即更新selectedNodeId提升响应速度\n    setSelectedNodeId(nodeId);\n    \n    // 立即更新展开状态，而不是使用requestAnimationFrame\n    setExpandedNodes(prev => {\n      const newSet = new Set(prev);\n      \n      // 切换展开状态\n      if (newSet.has(nodeId)) {\n        console.log(\"收起节点:\", nodeId);\n        newSet.delete(nodeId);\n      } else {\n        console.log(\"展开节点:\", nodeId); \n        newSet.add(nodeId);\n      }\n      \n      return newSet;\n    });\n  };\n  \n  // 处理节点拖拽开始\n  const handleDragStart = (nodeId: string, position: THREE.Vector3) => {\n    console.log(`开始拖拽节点: ${nodeId}`, position);\n  };\n  \n  // 处理节点拖拽中\n  const handleDrag = (nodeId: string, position: THREE.Vector3) => {\n    // 更新当前节点位置\n    setNodes3D(nodes => {\n      return nodes.map(node => {\n        if (node.id === nodeId) {\n          return { ...node, position: position.clone() };\n        }\n        \n        // 如果是子节点，也要跟随移动\n        if (node.id.startsWith(nodeId) && node.id !== nodeId) {\n          // 找到原始节点\n          const originalNode = nodes.find(n => n.id === nodeId);\n          if (originalNode) {\n            // 计算位移\n            const dx = position.x - originalNode.position.x;\n            const dy = position.y - originalNode.position.y;\n            \n            // 应用位移\n            return {\n              ...node,\n              position: new THREE.Vector3(\n                node.position.x + dx,\n                node.position.y + dy,\n                node.position.z\n              )\n            };\n          }\n        }\n        \n        return node;\n      });\n    });\n    \n    // 更新边\n    updateEdges();\n  };\n  \n  // 处理节点拖拽结束\n  const handleDragEnd = (nodeId: string) => {\n    console.log(`结束拖拽节点: ${nodeId}`);\n  };\n  \n  // 构建3D节点树\n  const buildNodeTree = (nodes: (KnowledgeNode | AbilityNode)[], nodeType: 'knowledge' | 'ability'): Node3D[] => {\n    // 创建节点映射\n    const nodeMap = new Map<string, Node3D>();\n    \n    // 创建3D节点\n    nodes.forEach(node => {\n      const isKnowledge = nodeType === 'knowledge';\n      // 知识图谱在底面，能力图谱在顶面\n      const zLevel = isKnowledge ? -5 : 5; // 调整为-5和5\n      \n      // 确定节点颜色和大小\n      let color = '#3a86ff';\n      if (isKnowledge) {\n        color = node.type === 'chapter' || node.type === 'section' ? '#3a86ff' : '#ff006e';\n      } else {\n        // 能力图谱使用金色调\n        color = node.type === 'chapter' || node.type === 'section' ? '#ffd700' : '#ff9900';\n      }\n      \n      // 创建初始3D节点\n      nodeMap.set(node.id, {\n        ...node,\n        nodeType,\n        children: [],\n        position: new THREE.Vector3(0, 0, zLevel), // 初始位置在各自的平面上\n        color,\n        radius: 0.6 + (node.importance || 0.5) * 0.8,\n        isExpanded: expandedNodes.has(node.id)\n      });\n    });\n    \n    // 构建树结构\n    nodes.forEach(node => {\n      if (node.id === 'DS' || node.id === 'AB') return;\n      \n      // 获取父节点ID\n      let parentId = '';\n      if ((node.id.startsWith('DS') || node.id.startsWith('AB')) && node.id.length > 2) {\n        parentId = node.id.slice(0, -2);\n        if (parentId === '') {\n          parentId = node.id.startsWith('DS') ? 'DS' : 'AB';\n        }\n      }\n      \n      // 添加到父节点的子节点列表\n      const parentNode = nodeMap.get(parentId);\n      const currentNode = nodeMap.get(node.id);\n      \n      if (parentNode && currentNode) {\n        parentNode.children.push(currentNode);\n      }\n    });\n    \n    // 返回根节点列表\n    return Array.from(nodeMap.values());\n  };\n  \n  // 扁平化节点树，根据展开状态筛选节点\n  const flattenNodeTree = (nodes: Node3D[], expanded: Set<string>): Node3D[] => {\n    const result: Node3D[] = [];\n    \n    const processNode = (node: Node3D, isVisible: boolean) => {\n      // 如果是根节点或父节点已展开，则可见\n      if (node.id === 'DS' || node.id === 'AB' || isVisible) {\n        result.push(node);\n        \n        // 如果当前节点已展开，则处理其子节点\n        const isExpanded = expanded.has(node.id);\n        node.children.forEach(child => {\n          processNode(child, isVisible && isExpanded);\n        });\n      }\n    };\n    \n    // 从根节点开始处理\n    const rootNodes = nodes.filter(node => node.id === 'DS' || node.id === 'AB');\n    rootNodes.forEach(root => processNode(root, true));\n    \n    return result;\n  };\n  \n  // 布局节点\n  const layoutNodes = (nodes: Node3D[]): Node3D[] => {\n    // 找到DS和AB根节点\n    const dsNode = nodes.find(node => node.id === 'DS');\n    const abNode = nodes.find(node => node.id === 'AB');\n    \n    // 设置两个图谱的中心点 - XY坐标相同，Z不同\n    const centerX = 0;\n    const centerY = 0;\n    const knowledgeZ = -5; // 底面，从-10改为-5\n    const abilityZ = 5;    // 顶面，从10改为5\n    const cylinderRadius = 12; // 增加圆柱体半径，从8增加到12，为节点提供更多空间\n    \n    // 更新根节点位置\n    if (dsNode) {\n      dsNode.position.set(centerX, centerY, knowledgeZ);\n    }\n    \n    if (abNode) {\n      abNode.position.set(centerX, centerY, abilityZ);\n    }\n    \n    // 递归布局子节点 - 在圆形平面向外布局\n    const layoutChildren = (node: Node3D, startAngle: number, angleRange: number, level: number, zLevel: number) => {\n      if (node.children.length === 0) return;\n      \n      // 计算每个子节点的角度\n      const angleStep = angleRange / node.children.length;\n      \n      // 根据子节点数量动态调整半径增量\n      const radiusMultiplier = Math.max(1.0, Math.min(1.5, node.children.length / 5)); // 子节点越多，半径越大\n      \n      node.children.forEach((child, index) => {\n        let radius = 0;\n        \n        if (level === 0) {\n          // 第一层子节点放在圆周边缘，带有一些随机偏移\n          radius = cylinderRadius * (1 + (Math.random() * 0.2 - 0.1)); // 添加±10%的随机偏移\n        } else {\n          // 后续层级向外扩散，基于层级和子节点数量动态计算\n          radius = cylinderRadius * (1 + 0.6 * level * radiusMultiplier);\n          \n          // 为同层级的节点添加随机半径偏移，避免完全对齐\n          const radiusVariation = radius * 0.15; // 15%的半径变化\n          radius += (Math.random() * radiusVariation - radiusVariation/2);\n        }\n        \n        // 计算子节点角度，添加小幅随机偏移\n        const angleOffset = (Math.random() * 0.3 - 0.15) * angleStep; // ±15%的角度随机偏移\n        const childAngle = startAngle + index * angleStep + (angleStep / 2) + angleOffset;\n        \n        // 计算位置 - 在XY平面上分布，Z固定但有微小随机变化\n        const x = centerX + radius * Math.cos(childAngle);\n        const y = centerY + radius * Math.sin(childAngle);\n        const zOffset = (Math.random() * 0.4 - 0.2); // 添加±0.2的Z轴随机偏移\n        \n        // 位于同一个Z平面上，但有微小偏移\n        child.position.set(x, y, zLevel + zOffset);\n        \n        // 递归布局子节点 - 围绕当前节点，分配一小段角度\n        const childAngleRange = angleStep * 0.9; // 给子节点分配稍小的角度范围\n        layoutChildren(child, childAngle - childAngleRange/2, childAngleRange, level + 1, zLevel);\n      });\n    };\n    \n    // 布局知识图谱 - 在底面平面上\n    if (dsNode) {\n      layoutChildren(dsNode, 0, 2 * Math.PI, 0, knowledgeZ);\n    }\n    \n    // 布局能力图谱 - 在顶面平面上\n    if (abNode) {\n      layoutChildren(abNode, 0, 2 * Math.PI, 0, abilityZ);\n    }\n    \n    return nodes;\n  };\n  \n  // 创建边\n  const createEdges = (nodes: Node3D[]): Edge3D[] => {\n    const edges: Edge3D[] = [];\n    \n    // 为每个节点创建到其父节点的边\n    nodes.forEach(node => {\n      if (node.id === 'DS' || node.id === 'AB') return;\n      \n      // 获取父节点ID\n      let parentId = '';\n      if ((node.id.startsWith('DS') || node.id.startsWith('AB')) && node.id.length > 2) {\n        parentId = node.id.slice(0, -2);\n        if (parentId === '') {\n          parentId = node.id.startsWith('DS') ? 'DS' : 'AB';\n        }\n      }\n      \n      // 查找父节点\n      const parentNode = nodes.find(n => n.id === parentId);\n      \n      if (parentNode) {\n        edges.push({\n          source: parentId,\n          target: node.id,\n          sourcePosition: parentNode.position,\n          targetPosition: node.position\n        });\n      }\n    });\n    \n    return edges;\n  };\n  \n  // 更新边的位置\n  const updateEdges = () => {\n    setEdges3D(edges => {\n      return edges.map(edge => {\n        const sourceNode = nodes3D.find(node => node.id === edge.source);\n        const targetNode = nodes3D.find(node => node.id === edge.target);\n        \n        if (sourceNode && targetNode) {\n          return {\n            ...edge,\n            sourcePosition: sourceNode.position,\n            targetPosition: targetNode.position\n          };\n        }\n        \n        return edge;\n      });\n    });\n  };\n  \n  // 当数据加载完成后，构建3D节点和边\n  useEffect(() => {\n    if (loading || knowledgeNodes.length === 0 || abilityNodes.length === 0) return;\n    \n    // 构建节点树\n    const knowledgeTree = buildNodeTree(knowledgeNodes, 'knowledge');\n    const abilityTree = buildNodeTree(abilityNodes, 'ability');\n    \n    // 合并两个图谱的节点\n    const allNodes = [...knowledgeTree, ...abilityTree];\n    \n    // 根据扩展状态筛选节点\n    const visibleNodes = flattenNodeTree(allNodes, expandedNodes);\n    \n    // 布局节点\n    const layoutedNodes = layoutNodes(visibleNodes);\n    \n    // 设置节点\n    setNodes3D(layoutedNodes);\n    \n    // 创建边\n    const edges = createEdges(layoutedNodes);\n    setEdges3D(edges);\n    \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [knowledgeNodes, abilityNodes, loading]);\n  \n  // 根据展开状态更新节点可见性\n  useEffect(() => {\n    if (nodes3D.length === 0 || !knowledgeNodes.length || !abilityNodes.length) return;\n    \n    // 使用requestAnimationFrame防止界面卡顿\n    const updateFrame = requestAnimationFrame(() => {\n      try {\n        // 构建节点树\n        const knowledgeTree = buildNodeTree(knowledgeNodes, 'knowledge');\n        const abilityTree = buildNodeTree(abilityNodes, 'ability');\n        \n        // 合并两个图谱的节点\n        const allNodes = [...knowledgeTree, ...abilityTree];\n        \n        // 根据展开状态筛选节点\n        const visibleNodes = flattenNodeTree(allNodes, expandedNodes);\n        \n        // 布局节点\n        const layoutedNodes = layoutNodes(visibleNodes);\n        \n        console.log(\"节点更新:\", layoutedNodes.length, \"展开节点:\", Array.from(expandedNodes));\n        \n        // 设置节点\n        setNodes3D(layoutedNodes);\n        \n        // 创建边\n        const edges = createEdges(layoutedNodes);\n        setEdges3D(edges);\n      } catch (error) {\n        console.error('节点展开时出错:', error);\n      }\n    });\n    \n    // 清理函数\n    return () => cancelAnimationFrame(updateFrame);\n    \n  // 确保依赖数组包含所有需要的变量\n  }, [expandedNodes, knowledgeNodes, abilityNodes]);\n  \n  if (loading) {\n    return (\n      <div style={{ width: '100%', height: '80vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <div>加载中...</div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div style={{ width: '100%', height: '80vh', display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#e74c3c' }}>\n        <div className=\"error-message\">错误: {error}</div>\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{ width: '100%', height: '80vh', position: 'relative' }}>\n      <Canvas \n        camera={{ position: [0, 0, 30], fov: 50 }}\n      >\n        <SafeScene>\n          {/* 添加整体旋转的群组 */}\n          <group rotation={[0, 0, 0]}>\n            {/* 渲染节点 */}\n            {nodes3D.filter(node => node.position && typeof node.position.x === 'number').map(node => (\n              <SafeNodeObject \n                key={node.id}\n                node={{\n                  ...node,\n                  isExpanded: expandedNodes.has(node.id) // 确保传递正确的展开状态\n                }}\n                onClick={handleNodeClick}\n                onDragStart={handleDragStart}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                isSelected={selectedNodeId === node.id}\n              />\n            ))}\n            \n            {/* 渲染边 */}\n            {edges3D.filter(edge => \n              edge.sourcePosition && \n              edge.targetPosition && \n              typeof edge.sourcePosition.x === 'number' && \n              typeof edge.targetPosition.x === 'number'\n            ).map(edge => (\n              <SafeEdgeObject \n                key={`${edge.source}-${edge.target}`}\n                edge={edge}\n                isSelected={selectedNodeId === edge.source || selectedNodeId === edge.target}\n              />\n            ))}\n            \n            {/* 添加连接中心点的线 */}\n            <primitive object={new THREE.Line(\n              new THREE.BufferGeometry().setFromPoints([\n                new THREE.Vector3(0, 0, -5),\n                new THREE.Vector3(0, 0, 5)\n              ]),\n              new THREE.LineBasicMaterial({ color: '#999999', opacity: 0.3, transparent: true })\n            )} />\n          </group>\n        </SafeScene>\n      </Canvas>\n      \n      {/* 添加图谱说明 */}\n      <div style={{ position: 'absolute', bottom: '10px', left: '10px', padding: '5px 10px', backgroundColor: 'rgba(0,0,0,0.5)', color: 'white', borderRadius: '5px' }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '5px' }}>\n          <div style={{ width: '12px', height: '12px', backgroundColor: '#3a86ff', marginRight: '5px', borderRadius: '50%' }}></div>\n          <span>知识图谱（底面）</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <div style={{ width: '12px', height: '12px', backgroundColor: '#ffd700', marginRight: '5px', borderRadius: '50%' }}></div>\n          <span>能力图谱（顶面）</span>\n        </div>\n      </div>\n      \n      {/* 添加调试信息 */}\n      <div style={{ position: 'absolute', top: '10px', right: '10px', padding: '5px 10px', backgroundColor: 'rgba(0,0,0,0.5)', color: 'white', borderRadius: '5px' }}>\n        <div>节点数量: {nodes3D.length}</div>\n        <div>已展开节点: {expandedNodes.size}</div>\n        {selectedNodeId && <div>选中节点: {selectedNodeId}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Graph3D; "],"names":["readExcelFile","async","workbook","read","file","worksheet","Sheets","SheetNames","utils","sheet_to_json","map","row","id","label","type","getNodeType","difficulty","Number","importance","description","readAbilityExcelFile","name","tag","length","_ref","node","onClick","onDragStart","onDrag","onDragEnd","isSelected","meshRef","useRef","isDragging","setIsDragging","useState","showTooltip","setShowTooltip","renderError","setRenderError","camera","useThree","materialProps","color","emissive","emissiveIntensity","isKnowledge","nodeType","radius","useEffect","current","position","copy","currentPos","targetPos","distanceTo","lerp","err","console","error","_jsxs","x","y","z","children","_jsx","args","ref","onPointerDown","e","_e$nativeEvent","_e$nativeEvent$preven","_meshRef$current","stopPropagation","nativeEvent","preventDefault","call","originalPosition","clone","onPointerMove","point","buttons","raycaster","THREE","setFromCamera","planeZ","plane","intersection","ray","intersectPlane","newX","newY","onPointerUp","log","onPointerEnter","document","body","style","cursor","onPointerLeave","Billboard","Text","fontSize","anchorX","anchorY","outlineWidth","outlineColor","fontWeight","renderOrder","Html","pointerEvents","zIndex","center","distanceFactor","className","wrapperClass","scale","occlude","transform","sprite","calculatePosition","el","size","backgroundColor","isExpanded","edge","sourcePosition","targetPosition","Error","start","end","isDifferentPlane","Math","abs","midPoint","addVectors","divideScalar","controlPoint","points","getPoints","lineGeometry","setFromPoints","direction","subVectors","normalize","object","linewidth","opacity","transparent","toArray","rotation","atan2","offsetFactor","min","perpendicular","offsetMagnitude","random","curve","arrowPosition","getPoint","tangent","getTangent","PI","message","extend","OrbitControls","gl","controlsRef","set","lookAt","controls","domElement","enabled","enableDamping","dampingFactor","rotateSpeed","zoomSpeed","enableZoom","screenSpacePanning","minPolarAngle","maxPolarAngle","autoRotate","minDistance","maxDistance","animate","requestAnimationFrame","update","dispose","_Fragment","intensity","castShadow","angle","penumbra","distance","attach","Graph3D","knowledgeNodes","setKnowledgeNodes","abilityNodes","setAbilityNodes","nodes3D","setNodes3D","edges3D","setEdges3D","loading","setLoading","setError","expandedNodes","setExpandedNodes","Set","selectedNodeId","setSelectedNodeId","knowledgeResponse","fetch","ok","knowledgeArrayBuffer","arrayBuffer","knowledgeData","abilityResponse","abilityArrayBuffer","abilityData","loadExcelData","handleNodeClick","nodeId","prev","newSet","has","delete","add","handleDragStart","handleDrag","nodes","startsWith","originalNode","find","n","dx","dy","updateEdges","handleDragEnd","buildNodeTree","nodeMap","Map","forEach","zLevel","parentId","slice","parentNode","get","currentNode","push","Array","from","values","flattenNodeTree","expanded","result","processNode","isVisible","child","filter","root","layoutNodes","dsNode","abNode","layoutChildren","startAngle","angleRange","level","angleStep","radiusMultiplier","max","index","radiusVariation","angleOffset","childAngle","cos","sin","zOffset","childAngleRange","createEdges","edges","source","target","sourceNode","targetNode","allNodes","visibleNodes","layoutedNodes","updateFrame","knowledgeTree","abilityTree","cancelAnimationFrame","width","height","display","alignItems","justifyContent","Canvas","fov","SafeScene","SafeNodeObject","SafeEdgeObject","bottom","left","padding","borderRadius","marginBottom","marginRight","top","right"],"sourceRoot":""}