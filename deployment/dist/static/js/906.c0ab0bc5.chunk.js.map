{"version":3,"file":"static/js/906.c0ab0bc5.chunk.js","mappings":"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","sources":["utils/excelReader.ts","Graph.tsx"],"sourcesContent":["import { read, utils } from 'xlsx';\n\nexport interface KnowledgeNode {\n  id: string;\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  difficulty: number;\n  importance: number;\n  description?: string;\n}\n\nexport interface AbilityNode {\n  id: string;\n  label: string;\n  name: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  tag?: string;\n}\n\nexport const readExcelFile = async (file: ArrayBuffer): Promise<KnowledgeNode[]> => {\n  const workbook = read(file);\n  const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  const jsonData = utils.sheet_to_json(worksheet);\n\n  return jsonData.map((row: any) => ({\n    id: row['编号'],\n    label: row['Name'],\n    // 根据编号长度判断类型\n    type: getNodeType(row['编号']),\n    difficulty: Number(row['Difficulty_degree']) || 0,\n    importance: Number(row['Importance_degree']) || 0,\n    description: row['Description']\n  }));\n};\n\nexport const readAbilityExcelFile = async (file: ArrayBuffer): Promise<AbilityNode[]> => {\n  const workbook = read(file);\n  const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n  const jsonData = utils.sheet_to_json(worksheet);\n\n  return jsonData.map((row: any) => ({\n    id: row['编号'],\n    label: row['Name'],\n    name: row['Label'],\n    // 根据编号长度判断类型\n    type: getNodeType(row['编号']),\n    difficulty: Number(row['难度']) || 0,\n    importance: Number(row['重要性']) || 0,\n    description: row['描述'],\n    tag: row['标签']\n  }));\n};\n\nconst getNodeType = (id: string): KnowledgeNode['type'] => {\n  const length = id.length;\n  switch (length) {\n    case 2: return 'chapter';\n    case 4: return 'section';\n    case 6: return 'subsection';\n    case 8: return 'point';\n    case 10: return 'detail';\n    default: return 'detail';\n  }\n}; ","import React, { useRef, useEffect, useState } from 'react';\nimport cytoscape, { NodeSingular, NodeDataDefinition, LayoutOptions } from 'cytoscape';\nimport coseBilkent from 'cytoscape-cose-bilkent'; // 更智能的布局算法\nimport { KnowledgeNode, AbilityNode, readExcelFile, readAbilityExcelFile } from './utils/excelReader';\n\n// 注册布局引擎\ncytoscape.use(coseBilkent);\n\ninterface NodeData extends NodeDataDefinition {\n  label: string;\n  type: 'chapter' | 'section' | 'subsection' | 'point' | 'detail';\n  difficulty: number;\n  importance: number;\n  description?: string;\n  nodeType?: 'knowledge' | 'ability'; // 添加节点分类\n  tag?: string; // 添加标签字段\n}\n\n// 根据ID长度确定节点类型\nconst getNodeType = (id: string): string => {\n  if (id === 'DS' || (id.startsWith('DS') && id.length <= 4)) return 'chapter';\n  if (id.startsWith('DS') && id.length <= 6) return 'section';\n  if (id.startsWith('DS') && id.length <= 8) return 'subsection';\n  if (id.startsWith('DS') && id.length <= 10) return 'point';\n  if (id === 'AB' || (id.startsWith('AB') && id.length <= 4)) return 'chapter';\n  if (id.startsWith('AB') && id.length <= 6) return 'section';\n  if (id.startsWith('AB') && id.length <= 8) return 'subsection';\n  if (id.startsWith('AB') && id.length <= 10) return 'point';\n  return 'detail';\n};\n\n// 创建边的关系\nconst createEdges = (nodes: (KnowledgeNode | AbilityNode)[]) => {\n  const edges: { data: { source: string, target: string, id: string } }[] = [];\n  \n  nodes.forEach(node => {\n    if (node.id === 'DS' || node.id === 'AB') return; // 跳过根节点\n    \n    // 获取父节点ID\n    let parentId: string;\n    if ((node.id.startsWith('DS') || node.id.startsWith('AB')) && node.id.length > 2) {\n      parentId = node.id.slice(0, -2);\n      // 确保parentId有效\n      if (parentId === '') {\n        parentId = node.id.startsWith('DS') ? 'DS' : 'AB'; // 如果截取后为空，则父节点为DS或AB\n      }\n    } else {\n      return; // 跳过不符合规则的节点\n    }\n    \n    edges.push({ \n      data: { \n        source: parentId, \n        target: node.id,\n        id: `${parentId}-${node.id}`\n      } \n    });\n  });\n  \n  console.log(`创建了 ${edges.length} 条边`); // 调试日志\n  return edges;\n};\n\nconst styles = {\n  container: {\n    width: '100%',\n    height: '80vh',\n    position: 'relative' as const,\n  },\n  loadingContainer: {\n    width: '100%',\n    height: '80vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    background: '#f9fafb',\n    color: '#2c3e50',\n    borderRadius: '12px',\n    fontSize: '18px',\n  },\n  errorContainer: {\n    width: '100%',\n    height: '80vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    background: '#f9fafb',\n    color: '#e74c3c',\n    borderRadius: '12px',\n    fontSize: '18px',\n  }\n};\n\n// 添加全局样式\nconst GlobalStyles = `\n  .node-tooltip {\n    position: fixed;\n    background: rgba(15, 23, 42, 0.9);\n    border: none;\n    border-radius: 12px;\n    padding: 16px;\n    color: #fff;\n    font-size: 14px;\n    pointer-events: none;\n    z-index: 1000;\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n    backdrop-filter: blur(8px);\n    max-width: 300px;\n    animation: tooltip-fade-in 0.2s ease-out;\n    transform-origin: center left;\n  }\n\n  @keyframes tooltip-fade-in {\n    from { opacity: 0; transform: translateY(10px) scale(0.95); }\n    to { opacity: 1; transform: translateY(0) scale(1); }\n  }\n\n  .node-tooltip .tooltip-header {\n    font-size: 18px;\n    font-weight: bold;\n    color: #fff;\n    margin-bottom: 12px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n    padding-bottom: 8px;\n    display: flex;\n    align-items: center;\n  }\n\n  .node-tooltip .tooltip-header::before {\n    content: '';\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: var(--dot-color, #3a86ff);\n    margin-right: 8px;\n  }\n\n  .node-tooltip .tooltip-content {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .node-tooltip .tooltip-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: 'Arial', sans-serif;\n  }\n\n  .node-tooltip .tooltip-item .label {\n    color: rgba(255, 255, 255, 0.7);\n    margin-right: 8px;\n    font-size: 13px;\n  }\n\n  .node-tooltip .tooltip-item .value {\n    color: #fff;\n    font-weight: 500;\n  }\n\n  .node-tooltip .tooltip-description {\n    margin-top: 12px;\n    padding-top: 12px;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .node-tooltip .tooltip-description .label {\n    color: rgba(255, 255, 255, 0.7);\n    margin-bottom: 6px;\n    font-size: 13px;\n  }\n\n  .node-tooltip .tooltip-description .value {\n    color: #fff;\n    line-height: 1.5;\n    font-size: 14px;\n  }\n`;\n\nconst Graph = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [knowledgeNodes, setKnowledgeNodes] = useState<KnowledgeNode[]>([]);\n  const [abilityNodes, setAbilityNodes] = useState<AbilityNode[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const cyRef = useRef<cytoscape.Core | null>(null);\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());\n\n  // 加载 Excel 文件\n  useEffect(() => {\n    const loadExcelData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // 加载知识图谱数据\n        const knowledgeResponse = await fetch('/knowledge_graph.xlsx');\n        if (!knowledgeResponse.ok) {\n          throw new Error('知识图谱Excel文件加载失败');\n        }\n        const knowledgeArrayBuffer = await knowledgeResponse.arrayBuffer();\n        const knowledgeData = await readExcelFile(knowledgeArrayBuffer);\n        if (!knowledgeData || knowledgeData.length === 0) {\n          throw new Error('知识图谱Excel文件为空或格式不正确');\n        }\n        setKnowledgeNodes(knowledgeData);\n        \n        // 加载能力图谱数据\n        const abilityResponse = await fetch('/ability_graph.xlsx');\n        if (!abilityResponse.ok) {\n          throw new Error('能力图谱Excel文件加载失败');\n        }\n        const abilityArrayBuffer = await abilityResponse.arrayBuffer();\n        const abilityData = await readAbilityExcelFile(abilityArrayBuffer);\n        if (!abilityData || abilityData.length === 0) {\n          throw new Error('能力图谱Excel文件为空或格式不正确');\n        }\n        setAbilityNodes(abilityData);\n      } catch (error) {\n        console.error('Failed to load Excel files:', error);\n        setError(error instanceof Error ? error.message : '未知错误');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadExcelData();\n  }, []);\n\n  // 初始化图谱\n  useEffect(() => {\n    if (!containerRef.current || loading || error || (knowledgeNodes.length === 0 && abilityNodes.length === 0)) return;\n\n    if (cyRef.current) {\n      cyRef.current.destroy();\n    }\n    \n    // 合并知识节点和能力节点\n    const combinedNodes = [\n      ...knowledgeNodes.map(node => ({\n        data: { \n          ...node,\n          isRoot: node.id === 'DS' || node.id.length <= 4,\n          type: getNodeType(node.id),\n          nodeType: 'knowledge' as const\n        }\n      })),\n      ...abilityNodes.map(node => ({\n        data: { \n          ...node,\n          isRoot: node.id === 'AB' || node.id.length <= 4,\n          type: getNodeType(node.id),\n          nodeType: 'ability' as const\n        }\n      }))\n    ];\n    \n    // 创建边\n    const edges = createEdges([...knowledgeNodes, ...abilityNodes]);\n\n    const cy = cytoscape({\n      container: containerRef.current,\n      elements: [\n        ...combinedNodes,\n        ...edges\n      ],\n      style: [\n        {\n          selector: 'node',\n          style: {\n            'label': 'data(label)',\n            'text-valign': 'center',\n            'text-halign': 'center',\n            'text-margin-y': 0,\n            'font-family': 'Arial',\n            'font-size': '20px',\n            'color': '#FFFFFF',\n            'text-outline-width': 2,\n            'text-outline-color': '#000000',\n            'text-outline-opacity': 1,\n            'text-background-opacity': 0,\n            'width': (ele: NodeSingular) => {\n              // 根据注册资本(importance)等比缩放\n              const capital = ele.data('importance') || 0.5;\n              // 映射到60px-150px范围\n              return 60 + (capital * 90);\n            },\n            'height': (ele: NodeSingular) => {\n              const capital = ele.data('importance') || 0.5;\n              return 60 + (capital * 90);\n            },\n            'shape': 'ellipse',\n            'background-color': (ele: NodeSingular) => {\n              // 根据节点类型设置颜色\n              const nodeType = ele.data('nodeType');\n              const type = ele.data('type');\n              \n              // 知识节点和能力节点使用不同的颜色方案\n              if (nodeType === 'knowledge') {\n                if (type === 'chapter' || type === 'section') return '#3a86ff';\n                return '#ff006e';\n              } else { // ability节点\n                if (type === 'chapter' || type === 'section') return '#00b894';\n                return '#fdcb6e';\n              }\n            },\n            'background-opacity': 0.85,\n            'border-width': 3,\n            'border-color': '#fff',\n            'border-opacity': 0.9,\n            'transition-property': 'width, height, background-color, border-color, border-width, opacity',\n            'transition-duration': 200,\n            'transition-timing-function': 'ease-in-out'\n          }\n        },\n        {\n          selector: 'edge',\n          style: {\n            'width': 1.5,\n            'line-color': 'rgba(150, 150, 150, 0.7)',\n            'curve-style': 'bezier',\n            'opacity': 0.8,\n            'target-arrow-shape': 'triangle',\n            'target-arrow-color': 'rgba(150, 150, 150, 0.7)',\n            'arrow-scale': 0.7,\n            'z-index': 1,\n            'transition-property': 'line-color, width, opacity, target-arrow-color',\n            'transition-duration': 200\n          }\n        },\n        {\n          selector: 'node:hover',\n          style: {\n            'width': (ele: NodeSingular) => {\n              const capital = ele.data('importance') || 0.5;\n              // 悬停时放大到1.1倍\n              return (60 + (capital * 90)) * 1.1;\n            },\n            'height': (ele: NodeSingular) => {\n              const capital = ele.data('importance') || 0.5;\n              return (60 + (capital * 90)) * 1.1;\n            },\n            'background-opacity': 0.95,\n            'border-width': 5,\n            'border-color': '#fff',\n            'border-opacity': 1,\n            'text-background-opacity': 0,\n            'color': '#FFFFFF',\n            'text-outline-width': 2.5,\n            'text-outline-color': '#000000',\n            'text-outline-opacity': 1,\n            'font-size': '22px',\n            'font-weight': 'bold',\n            'z-index': 999\n          }\n        },\n        {\n          selector: 'node:selected',\n          style: {\n            'background-opacity': 1,\n            'border-width': 5,\n            'border-color': '#f8f32b',\n            'border-opacity': 1,\n            'text-background-opacity': 0,\n            'color': '#FFFFFF',\n            'text-outline-width': 3,\n            'text-outline-color': '#000000',\n            'text-outline-opacity': 1,\n            'font-size': '24px',\n            'font-weight': 'bold',\n            'z-index': 999,\n            'width': (ele: NodeSingular) => {\n              const capital = ele.data('importance') || 0.5;\n              return (60 + (capital * 90)) * 1.2;\n            },\n            'height': (ele: NodeSingular) => {\n              const capital = ele.data('importance') || 0.5;\n              return (60 + (capital * 90)) * 1.2;\n            }\n          }\n        }\n      ],\n      layout: {\n        name: 'preset', // 使用预设布局\n        fit: true,\n        padding: 50\n      },\n      minZoom: 0.2,\n      maxZoom: 3,\n      wheelSensitivity: 0.3,\n      zoomingEnabled: true,\n      userZoomingEnabled: true,\n      panningEnabled: true,\n      userPanningEnabled: true,\n      boxSelectionEnabled: true,\n      selectionType: 'single',\n      autoungrabify: false,\n      autounselectify: false\n    });\n\n    cyRef.current = cy;\n\n    // 添加点击事件处理\n    cy.on('tap', 'node', function(evt) {\n      const node = evt.target;\n      const nodeId = node.id();\n      \n      // 阻止事件冒泡，防止触发画布的fit操作\n      evt.originalEvent?.preventDefault();\n      evt.originalEvent?.stopPropagation();\n\n      // 处理所有节点的展开/收起\n      console.log(`节点点击处理: ${nodeId}`);\n      toggleNodeExpansion(nodeId);\n      \n      // 高亮点击的节点及其相关边\n      cy.elements().removeClass('highlighted');\n      \n      // 高亮节点\n      node.addClass('highlighted');\n      \n      // 高亮连接的边\n      node.connectedEdges().addClass('highlighted');\n      \n      // 高亮相邻节点\n      node.neighborhood('node').addClass('highlighted');\n      \n      // 放大点击的节点\n      node.animate({\n        style: {\n          'width': node.width() * 1.2,\n          'height': node.height() * 1.2\n        },\n        duration: 300,\n        easing: 'ease-out-cubic'\n      });\n    });\n\n    // 添加拖拽相关事件处理\n    let nodeBeingDragged: cytoscape.NodeSingular | null = null;\n    let descendants: cytoscape.NodeCollection | null = null;\n    let lastPosition: { x: number, y: number } | null = null;\n    \n    // 监听节点的grabify事件（拖拽开始）\n    cy.on('grab', 'node', function(e) {\n      const node = e.target;\n      const nodeId = node.id();\n      \n      // 保存当前节点\n      nodeBeingDragged = node;\n      \n      // 查找所有子孙节点\n      descendants = cy.collection();\n      \n      cy.nodes().forEach(n => {\n        if (n.id() !== nodeId && n.id().startsWith(nodeId)) {\n          // 因为之前已经初始化为cy.collection()，所以descendants此处一定不为null\n          descendants!.union(n);\n        }\n      });\n      \n      // 另一种方式：直接使用filter查找所有子孙节点\n      descendants = cy.nodes().filter(n => n.id() !== nodeId && n.id().startsWith(nodeId));\n      \n      // 记录初始位置\n      lastPosition = { ...node.position() };\n      \n      // 启用节点拖拽\n      node.unlock();\n      // 确保descendants不为null\n      if (descendants) {\n        descendants.unlock();\n      }\n      \n      console.log(`开始拖拽节点: ${nodeId}, 子节点数量: ${descendants ? descendants.size() : 0}`);\n    });\n    \n    // 监听拖拽过程\n    cy.on('drag', 'node', function(e) {\n      const node = e.target;\n      \n      // 确保是正在拖拽的节点\n      if (!nodeBeingDragged || node.id() !== nodeBeingDragged.id() || !lastPosition || !descendants) {\n        return;\n      }\n      \n      // 计算位移\n      const currentPosition = node.position();\n      const dx = currentPosition.x - lastPosition.x;\n      const dy = currentPosition.y - lastPosition.y;\n      \n      // 移动所有子孙节点\n      descendants.forEach(descendant => {\n        const pos = descendant.position();\n        descendant.position({\n          x: pos.x + dx,\n          y: pos.y + dy\n        });\n      });\n      \n      // 更新上一个位置\n      lastPosition = { ...currentPosition };\n    });\n    \n    // 监听拖拽结束\n    cy.on('free', 'node', function(e) {\n      const node = e.target;\n      \n      // 确保是正在拖拽的节点\n      if (nodeBeingDragged && node.id() === nodeBeingDragged.id()) {\n        console.log(`结束拖拽节点: ${node.id()}`);\n        \n        // 清理状态\n        nodeBeingDragged = null;\n        lastPosition = null;\n        descendants = null;\n      }\n    });\n\n    // 添加样式\n    cy.style()\n      .selector('.highlighted')\n      .style({\n        'background-color': '#000000',\n        'border-color': '#FFD700',\n        'border-width': 5,\n        'border-opacity': 1,\n        'opacity': 1,\n        'text-background-opacity': 0,\n        'color': '#FFFFFF',\n        'text-outline-width': 3,\n        'text-outline-color': '#000000',\n        'text-outline-opacity': 1,\n        'font-size': '24px',\n        'font-weight': 'bold',\n        'z-index': 999,\n        'width': (ele: NodeSingular) => {\n          const capital = ele.data('importance') || 0.5;\n          return (60 + (capital * 90)) * 1.2;\n        },\n        'height': (ele: NodeSingular) => {\n          const capital = ele.data('importance') || 0.5;\n          return (60 + (capital * 90)) * 1.2;\n        }\n      })\n      .selector('edge.highlighted')\n      .style({\n        'line-color': '#FF4500',\n        'width': 7,\n        'opacity': 1,\n        'z-index': 999,\n        'target-arrow-color': '#FF4500',\n        'arrow-scale': 2.5,\n        'line-style': 'solid'\n      })\n      // 添加淡入淡出过渡\n      .selector('node')\n      .style({\n        'transition-property': 'opacity, width, height, background-color, border-color, border-width',\n        'transition-duration': 300,\n        'transition-timing-function': 'ease-in-out'\n      })\n      .selector('edge')\n      .style({\n        'transition-property': 'opacity, width, line-color',\n        'transition-duration': 300,\n        'transition-timing-function': 'ease-in-out'\n      })\n      .update();\n    \n    // 手动设置预设布局\n    cy.ready(() => {\n      // 构建节点之间的父子关系\n      const childrenMap: {[key: string]: cytoscape.NodeSingular[]} = {};\n      const parentMap: {[key: string]: cytoscape.NodeSingular} = {};\n      \n      // 获取所有边，建立父子关系\n      cy.edges().forEach(edge => {\n        const source = edge.source();\n        const target = edge.target();\n        \n        const sourceId = source.id();\n        const targetId = target.id();\n        \n        if (sourceId.length < targetId.length) {\n          if (!childrenMap[sourceId]) {\n            childrenMap[sourceId] = [];\n          }\n          childrenMap[sourceId].push(target);\n          parentMap[targetId] = source;\n        }\n      });\n      \n      // 使用BFS方式构建扇形布局\n      const layoutByLevel = () => {\n        // 获取顶层节点（DS和AB）\n        const dsNode = cy.getElementById('DS');\n        const abNode = cy.getElementById('AB');\n        \n        // 计算每个节点的总子节点数（包括间接子节点）\n        const calculateTotalChildren = (node: cytoscape.NodeSingular): number => {\n          const children = (childrenMap[node.id()] || []) as cytoscape.NodeSingular[];\n          let total = children.length;\n          children.forEach(child => {\n            total += calculateTotalChildren(child);\n          });\n          return total;\n        };\n      \n        // 计算节点位置的函数\n        const positionNode = (\n          node: cytoscape.NodeSingular,\n          level: number,\n          startAngle: number,\n          endAngle: number,\n          centerX: number,\n          centerY: number\n        ) => {\n          // 获取并排序子节点\n          const children = (childrenMap[node.id()] || [])\n            .sort((a, b) => a.id().localeCompare(b.id()));\n      \n          // 计算基础半径和节点大小\n          const baseRadius = 400 * (level + 1);\n          \n          // 计算当前节点的位置\n          const angle = (startAngle + endAngle) / 2;\n          const radius = baseRadius;\n          const x = centerX + radius * Math.cos(angle);\n          const y = centerY + radius * Math.sin(angle);\n          \n          // 设置节点位置\n          node.position({ x, y });\n          \n          if (children.length > 0) {\n            // 计算每个子节点的权重（基于其子树大小）\n            const childrenWeights = children.map(child => {\n              const totalChildren = calculateTotalChildren(child);\n              return Math.max(1, totalChildren); // 确保每个节点至少有1的权重\n            });\n      \n            // 计算总权重\n            const totalWeight = childrenWeights.reduce((sum, weight) => sum + weight, 0);\n      \n            // 根据权重分配角度\n            let currentAngle = startAngle;\n            children.forEach((child, index) => {\n              const weight = childrenWeights[index];\n              const angleRange = (endAngle - startAngle) * (weight / totalWeight);\n              const childEndAngle = currentAngle + angleRange;\n              \n              positionNode(child, level + 1, currentAngle, childEndAngle, centerX, centerY);\n              currentAngle = childEndAngle;\n            });\n          }\n        };\n        \n        // 设置知识图谱和能力图谱的中心点\n        const centerDistance = 1200; // 两个图谱中心的距离\n        const knowledgeCenterX = -centerDistance / 2;\n        const knowledgeCenterY = 0;\n        const abilityCenterX = centerDistance / 2;\n        const abilityCenterY = 0;\n        \n        // 设置DS和AB节点的位置\n        if (dsNode) {\n          dsNode.position({ x: knowledgeCenterX, y: knowledgeCenterY });\n        }\n        if (abNode) {\n          abNode.position({ x: abilityCenterX, y: abilityCenterY });\n        }\n        \n        // 布局DS节点的子树\n        if (dsNode && childrenMap['DS']) {\n          const dsChildren = childrenMap['DS'].sort((a, b) => a.id().localeCompare(b.id()));\n          const dsChildrenWeights = dsChildren.map(child => {\n            const totalChildren = calculateTotalChildren(child);\n            return Math.max(1, totalChildren);\n          });\n          const totalDsWeight = dsChildrenWeights.reduce((sum, weight) => sum + weight, 0);\n          \n          let currentAngle = 0;\n          dsChildren.forEach((child, index) => {\n            const weight = dsChildrenWeights[index];\n            const angleRange = 2 * Math.PI * (weight / totalDsWeight);\n            const endAngle = currentAngle + angleRange;\n            \n            positionNode(child, 0, currentAngle, endAngle, knowledgeCenterX, knowledgeCenterY);\n            currentAngle = endAngle;\n          });\n        }\n        \n        // 布局AB节点的子树\n        if (abNode && childrenMap['AB']) {\n          const abChildren = childrenMap['AB'].sort((a, b) => a.id().localeCompare(b.id()));\n          const abChildrenWeights = abChildren.map(child => {\n            const totalChildren = calculateTotalChildren(child);\n            return Math.max(1, totalChildren);\n          });\n          const totalAbWeight = abChildrenWeights.reduce((sum, weight) => sum + weight, 0);\n          \n          let currentAngle = 0;\n          abChildren.forEach((child, index) => {\n            const weight = abChildrenWeights[index];\n            const angleRange = 2 * Math.PI * (weight / totalAbWeight);\n            const endAngle = currentAngle + angleRange;\n            \n            positionNode(child, 0, currentAngle, endAngle, abilityCenterX, abilityCenterY);\n            currentAngle = endAngle;\n          });\n        }\n      };\n      \n      // 先应用布局算法确保节点有初始位置\n      const layout = cy.layout({\n        name: 'cose-bilkent',\n        // 使用类型断言以避免TS错误\n        animate: false,\n        animationDuration: 0,\n        nodeRepulsion: 4500,\n        idealEdgeLength: 100,\n        edgeElasticity: 0.45,\n        nestingFactor: 0.1,\n        gravity: 0.25,\n        gravityRange: 3.8,\n        nodeDimensionsIncludeLabels: true\n      } as any);\n      \n      layout.run();\n\n      // 然后应用扇形布局\n      setTimeout(() => {\n        // 执行扇形布局\n        layoutByLevel();\n        \n        // 调整视图\n        cy.fit(undefined, 80);\n        cy.center();\n  \n        // 初始时根据展开状态更新节点可见性\n        updateNodesVisibility();\n        \n        // 初始化节点的展开/收起标记\n        updateExpandCollapseMarkers();\n        \n        // 初始化提示框\n        setupTooltips();\n      }, 100);\n    });\n\n    // 添加缩放重置功能\n    cy.on('dblclick', function(event) {\n      if (event.target === cy || event.target.isEdge()) {\n        cy.animation({\n          fit: {\n            eles: cy.elements(),\n            padding: 50\n          },\n          duration: 500,\n          easing: 'ease-out-cubic'\n        }).play();\n      }\n    });\n\n    const resizeObserver = new ResizeObserver(() => {\n      if (cyRef.current) {\n        cyRef.current.resize();\n      }\n    });\n    resizeObserver.observe(containerRef.current);\n\n    return () => {\n      if (cyRef.current) {\n        cyRef.current.destroy();\n        cyRef.current = null;\n      }\n      resizeObserver.disconnect();\n      \n      // 移除提示框\n      const tooltip = document.querySelector('.node-tooltip');\n      if (tooltip && tooltip.parentNode) {\n        tooltip.parentNode.removeChild(tooltip);\n      }\n    };\n  }, [knowledgeNodes, abilityNodes, loading, error]);\n\n  // 单独监听expandedNodes变化，只更新节点可见性而不重新渲染整个图\n  useEffect(() => {\n    if (cyRef.current) {\n      updateNodesVisibility();\n      // 更新节点的展开/收起标记\n      updateExpandCollapseMarkers();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expandedNodes]);\n\n  // 添加更新节点展开/收起标记的函数\n  const updateExpandCollapseMarkers = () => {\n    if (!cyRef.current) return;\n    \n    const cy = cyRef.current;\n    \n    cy.nodes().forEach(node => {\n      const nodeId = node.id();\n      \n      // 检查是否有子节点\n      let hasChildren = false;\n      if (nodeId === 'DS') {\n        // 对于DS根节点，子节点是直接以DS开头的节点\n        const childNodes = cy.nodes().filter(n => {\n          if (n.isNode()) {\n            const id = n.id();\n            return id.startsWith('DS') && id !== 'DS' && id.length <= 4;\n          }\n          return false;\n        });\n        hasChildren = childNodes.length > 0;\n      } else if (nodeId === 'AB') {\n        // 对于AB根节点，子节点是直接以AB开头的节点\n        const childNodes = cy.nodes().filter(n => {\n          if (n.isNode()) {\n            const id = n.id();\n            return id.startsWith('AB') && id !== 'AB' && id.length <= 4;\n          }\n          return false;\n        });\n        hasChildren = childNodes.length > 0;\n      } else {\n        // 对于其他节点，查找前缀匹配的子节点\n        const childNodes = cy.nodes().filter(n => {\n          if (n.isNode()) {\n            const id = n.id();\n            return id.startsWith(nodeId) && id.length === nodeId.length + 2;\n          }\n          return false;\n        });\n        hasChildren = childNodes.length > 0;\n      }\n      \n      if (hasChildren) {\n        // 如果有子节点，根据当前展开状态添加+/-标记\n        const isExpanded = expandedNodes.has(nodeId);\n        const originalLabel = node.data('originalLabel') || node.data('label');\n        \n        // 保存原始标签，以便后续修改\n        if (!node.data('originalLabel')) {\n          node.data('originalLabel', originalLabel);\n        }\n        \n        // 设置带有展开/收起标记的新标签\n        const newLabel = originalLabel + (isExpanded ? ' −' : ' +');\n        node.data('label', newLabel);\n      }\n    });\n  };\n\n  // 节点展开和收起逻辑\n  const toggleNodeExpansion = (nodeId: string) => {\n    if (!cyRef.current) return;\n    \n    const cy = cyRef.current;\n    const node = cy.getElementById(nodeId);\n    \n    // 检查是否有子节点\n    let children;\n    if (nodeId === 'DS') {\n      // 对于DS根节点，子节点是直接以DS开头的节点\n      children = cy.nodes().filter(n => {\n        if (n.isNode()) {\n          const id = n.id();\n          return id.startsWith('DS') && id !== 'DS' && id.length <= 4;\n        }\n        return false;\n      });\n    } else if (nodeId === 'AB') {\n      // 对于AB根节点，子节点是直接以AB开头的节点\n      children = cy.nodes().filter(n => {\n        if (n.isNode()) {\n          const id = n.id();\n          return id.startsWith('AB') && id !== 'AB' && id.length <= 4;\n        }\n        return false;\n      });\n    } else {\n      // 对于其他节点，查找前缀匹配的子节点\n      children = cy.nodes().filter(n => {\n        if (n.isNode()) {\n          const id = n.id();\n          return id.startsWith(nodeId) && id.length === nodeId.length + 2;\n        }\n        return false;\n      });\n    }\n    \n    if (children.length === 0) {\n      return; // 没有子节点，不需要展开/收起\n    }\n    \n    // 更新expandedNodes状态\n    setExpandedNodes(prev => {\n      const newSet = new Set(prev);\n      const isCurrentlyExpanded = newSet.has(nodeId);\n      \n      if (isCurrentlyExpanded) {\n        newSet.delete(nodeId);\n      } else {\n        newSet.add(nodeId);\n      }\n      \n      return newSet;\n    });\n  };\n\n  // 更新节点可见性，优化性能并添加平滑过渡效果\n  const updateNodesVisibility = () => {\n    if (!cyRef.current) return;\n    \n    const cy = cyRef.current;\n    \n    // 首先将所有节点设置为透明而不是隐藏，以便于动画过渡\n    cy.batch(() => {\n      // 处理DS的直接子节点\n      cy.nodes().filter(node => {\n        const nodeId = node.id();\n        return nodeId !== 'DS' && nodeId.startsWith('DS') && nodeId.length <= 4;\n      }).forEach(node => {\n        const isDSExpanded = expandedNodes.has('DS');\n        node.style('opacity', isDSExpanded ? 1 : 0);\n        \n        // 使用setTimeout确保CSS过渡动画完成后再更改display属性\n        setTimeout(() => {\n          if (cyRef.current) {\n            node.style('display', isDSExpanded ? 'element' : 'none');\n          }\n        }, 300);\n      });\n      \n      // 处理AB的直接子节点\n      cy.nodes().filter(node => {\n        const nodeId = node.id();\n        return nodeId !== 'AB' && nodeId.startsWith('AB') && nodeId.length <= 4;\n      }).forEach(node => {\n        const isABExpanded = expandedNodes.has('AB');\n        node.style('opacity', isABExpanded ? 1 : 0);\n        \n        // 使用setTimeout确保CSS过渡动画完成后再更改display属性\n        setTimeout(() => {\n          if (cyRef.current) {\n            node.style('display', isABExpanded ? 'element' : 'none');\n          }\n        }, 300);\n      });\n      \n      // 处理其他非根节点\n      cy.nodes().filter(node => {\n        const nodeId = node.id();\n        return nodeId !== 'DS' && nodeId !== 'AB' && \n               !(nodeId.startsWith('DS') && nodeId.length <= 4) && \n               !(nodeId.startsWith('AB') && nodeId.length <= 4);\n      }).forEach(node => {\n        const nodeId = node.id();\n        let parentId = '';\n        \n        // 计算父节点ID\n        if (nodeId.startsWith('DS') || nodeId.startsWith('AB')) {\n          parentId = nodeId.slice(0, -2);\n          if (parentId === '') {\n            parentId = nodeId.startsWith('DS') ? 'DS' : 'AB';\n          }\n        }\n        \n        const isParentExpanded = expandedNodes.has(parentId);\n        \n        // 递归检查上层节点是否都展开\n        let shouldBeVisible = isParentExpanded;\n        let currentParentId = parentId;\n        \n        while ((currentParentId !== 'DS' && currentParentId !== 'AB') && \n               currentParentId.length > 4 && shouldBeVisible) {\n          const grandParentId = currentParentId.slice(0, -2);\n          shouldBeVisible = expandedNodes.has(grandParentId);\n          currentParentId = grandParentId;\n        }\n        \n        // 还需检查根节点是否展开（对于深层级节点）\n        if (shouldBeVisible) {\n          if (nodeId.startsWith('DS') && !expandedNodes.has('DS')) {\n            shouldBeVisible = false;\n          } else if (nodeId.startsWith('AB') && !expandedNodes.has('AB')) {\n            shouldBeVisible = false;\n          }\n        }\n        \n        node.style('opacity', shouldBeVisible ? 1 : 0);\n        \n        // 使用setTimeout确保CSS过渡动画完成后再更改display属性\n        setTimeout(() => {\n          if (cyRef.current) {\n            node.style('display', shouldBeVisible ? 'element' : 'none');\n          }\n        }, 300);\n      });\n      \n      // 确保DS和AB根节点总是可见\n      cy.getElementById('DS').style('display', 'element').style('opacity', 1);\n      cy.getElementById('AB').style('display', 'element').style('opacity', 1);\n      \n      // 边只有在源节点和目标节点都可见时才显示\n      cy.edges().forEach(edge => {\n        const source = edge.source();\n        const target = edge.target();\n        \n        // 获取源节点和目标节点的不透明度并转换为数字\n        const sourceOpacity = parseFloat(source.style('opacity'));\n        const targetOpacity = parseFloat(target.style('opacity'));\n        \n        const isSourceVisible = !isNaN(sourceOpacity) && sourceOpacity > 0;\n        const isTargetVisible = !isNaN(targetOpacity) && targetOpacity > 0;\n        \n        edge.style('opacity', (isSourceVisible && isTargetVisible) ? 0.8 : 0);\n        \n        // 使用setTimeout确保CSS过渡动画完成后再更改display属性\n        setTimeout(() => {\n          if (cyRef.current) {\n            edge.style('display', (isSourceVisible && isTargetVisible) ? 'element' : 'none');\n          }\n        }, 300);\n      });\n    });\n  };\n\n  // 添加设置提示框函数\n  const setupTooltips = () => {\n    if (!cyRef.current) return;\n    \n    const cy = cyRef.current;\n    \n    // 创建提示框元素\n    let tooltip = document.querySelector('.node-tooltip') as HTMLElement;\n    if (!tooltip) {\n      tooltip = document.createElement('div');\n      tooltip.className = 'node-tooltip';\n      tooltip.style.display = 'none';\n      document.body.appendChild(tooltip);\n    }\n    \n    // 清理字段值，移除可能的重复前缀\n    const cleanFieldValue = (value: string | number | undefined, prefix: string): string => {\n      if (value === undefined) return '未设置';\n      \n      // 转换为字符串\n      let strValue = String(value);\n      \n      // 从截图看，编号的值可能是\"编号: DS07\"这种格式\n      // 检查是否包含冒号，如果有则只保留冒号后面的内容\n      if (strValue.includes(':')) {\n        strValue = strValue.split(':').slice(1).join(':').trim();\n      }\n      \n      return strValue;\n    };\n    \n    // 鼠标悬停在节点上显示提示框\n    cy.on('mouseover', 'node', (event) => {\n      const node = event.target;\n      const nodeData = node.data();\n      const nodeType = nodeData.nodeType;\n      \n      // 根据节点类型设置不同的提示框内容\n      if (nodeType === 'knowledge') {\n        // 知识节点提示框\n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\" style=\"--dot-color: ${node.style('background-color')}\">\n            ${nodeData.label || nodeData.id}\n          </div>\n          <div class=\"tooltip-content\">\n            <div class=\"tooltip-item\">\n              <span class=\"value\">${cleanFieldValue(nodeData.id, '编号:')}</span>\n            </div>\n            <div class=\"tooltip-item\">\n              <span class=\"label\">类型:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.type, '类型:')}</span>\n            </div>\n            <div class=\"tooltip-item\">\n              <span class=\"label\">重要性:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.importance, '重要性:')}</span>\n            </div>\n            <div class=\"tooltip-item\">\n              <span class=\"label\">难度:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.difficulty, '难度:')}</span>\n            </div>\n            ${nodeData.description ? `\n              <div class=\"tooltip-description\">\n                <div class=\"label\">描述:</div>\n                <div class=\"value\">${cleanFieldValue(nodeData.description, '描述:')}</div>\n              </div>\n            ` : ''}\n          </div>\n        `;\n      } else {\n        // 能力节点提示框\n        tooltip.innerHTML = `\n          <div class=\"tooltip-header\" style=\"--dot-color: ${node.style('background-color')}\">\n            ${nodeData.label || nodeData.id}\n          </div>\n          <div class=\"tooltip-content\">\n            <div class=\"tooltip-item\">\n              <span class=\"value\">${cleanFieldValue(nodeData.id, '编号:')}</span>\n            </div>\n            ${nodeData.name ? `\n              <div class=\"tooltip-item\">\n                <span class=\"label\">能力:</span>\n                <span class=\"value\">${cleanFieldValue(nodeData.name, '能力:')}</span>\n              </div>\n            ` : ''}\n            <div class=\"tooltip-item\">\n              <span class=\"label\">类型:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.type, '类型:')}</span>\n            </div>\n            <div class=\"tooltip-item\">\n              <span class=\"label\">重要性:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.importance, '重要性:')}</span>\n            </div>\n            <div class=\"tooltip-item\">\n              <span class=\"label\">难度:</span>\n              <span class=\"value\">${cleanFieldValue(nodeData.difficulty, '难度:')}</span>\n            </div>\n            ${nodeData.tag ? `\n              <div class=\"tooltip-item\">\n                <span class=\"label\">标签:</span>\n                <span class=\"value\">${cleanFieldValue(nodeData.tag, '标签:')}</span>\n              </div>\n            ` : ''}\n            ${nodeData.description ? `\n              <div class=\"tooltip-description\">\n                <div class=\"label\">描述:</div>\n                <div class=\"value\">${cleanFieldValue(nodeData.description, '描述:')}</div>\n              </div>\n            ` : ''}\n          </div>\n        `;\n      }\n      \n      // 显示提示框\n      tooltip.style.display = 'block';\n      \n      // 更新提示框位置\n      const position = event.renderedPosition || node.renderedPosition();\n      const containerRect = containerRef.current?.getBoundingClientRect();\n      \n      if (containerRect) {\n        // 计算提示框位置，确保在视口内且靠近鼠标\n        const x = containerRect.left + position.x + 20;\n        const y = containerRect.top + position.y - 30;\n        \n        tooltip.style.left = `${x}px`;\n        tooltip.style.top = `${y}px`;\n        \n        // 检查并调整提示框位置，确保不超出屏幕\n        const tooltipRect = tooltip.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        \n        if (tooltipRect.right > viewportWidth) {\n          tooltip.style.left = `${x - tooltipRect.width - 40}px`;\n        }\n        \n        if (tooltipRect.bottom > viewportHeight) {\n          tooltip.style.top = `${y - tooltipRect.height}px`;\n        }\n      }\n    });\n    \n    // 鼠标离开节点隐藏提示框\n    cy.on('mouseout', 'node', () => {\n      tooltip.style.display = 'none';\n    });\n    \n    // 移动时更新提示框位置\n    cy.on('mousemove', 'node', (event) => {\n      if (tooltip.style.display === 'none') return;\n      \n      const position = event.renderedPosition;\n      const containerRect = containerRef.current?.getBoundingClientRect();\n      \n      if (containerRect && position) {\n        // 更新提示框位置\n        const x = containerRect.left + position.x + 20;\n        const y = containerRect.top + position.y - 30;\n        \n        tooltip.style.left = `${x}px`;\n        tooltip.style.top = `${y}px`;\n        \n        // 检查并调整提示框位置，确保不超出屏幕\n        const tooltipRect = tooltip.getBoundingClientRect();\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        \n        if (tooltipRect.right > viewportWidth) {\n          tooltip.style.left = `${x - tooltipRect.width - 40}px`;\n        }\n        \n        if (tooltipRect.bottom > viewportHeight) {\n          tooltip.style.top = `${y - tooltipRect.height}px`;\n        }\n      }\n    });\n  };\n\n  if (loading) {\n    return (\n      <div style={styles.loadingContainer}>\n        <div>加载中...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={styles.errorContainer}>\n        <div>错误: {error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <style>{GlobalStyles}</style>\n      <div ref={containerRef} style={styles.container} />\n    </>\n  );\n};\n\nexport default Graph;\n"],"names":["readExcelFile","async","workbook","read","file","worksheet","Sheets","SheetNames","utils","sheet_to_json","map","row","id","label","type","getNodeType","difficulty","Number","importance","description","readAbilityExcelFile","name","tag","length","cytoscape","use","coseBilkent","startsWith","styles","container","width","height","position","loadingContainer","display","alignItems","justifyContent","background","color","borderRadius","fontSize","errorContainer","Graph","containerRef","useRef","knowledgeNodes","setKnowledgeNodes","useState","abilityNodes","setAbilityNodes","loading","setLoading","error","setError","cyRef","expandedNodes","setExpandedNodes","Set","useEffect","knowledgeResponse","fetch","ok","Error","knowledgeArrayBuffer","arrayBuffer","knowledgeData","abilityResponse","abilityArrayBuffer","abilityData","console","message","loadExcelData","current","destroy","combinedNodes","node","data","isRoot","nodeType","edges","nodes","forEach","parentId","slice","push","source","target","log","createEdges","cy","elements","style","selector","ele","layout","fit","padding","minZoom","maxZoom","wheelSensitivity","zoomingEnabled","userZoomingEnabled","panningEnabled","userPanningEnabled","boxSelectionEnabled","selectionType","autoungrabify","autounselectify","on","evt","_evt$originalEvent","_evt$originalEvent2","nodeId","originalEvent","preventDefault","stopPropagation","toggleNodeExpansion","removeClass","addClass","connectedEdges","neighborhood","animate","duration","easing","nodeBeingDragged","descendants","lastPosition","e","collection","n","union","filter","unlock","size","currentPosition","dx","x","dy","y","descendant","pos","update","ready","childrenMap","parentMap","edge","sourceId","targetId","animationDuration","nodeRepulsion","idealEdgeLength","edgeElasticity","nestingFactor","gravity","gravityRange","nodeDimensionsIncludeLabels","run","setTimeout","layoutByLevel","dsNode","getElementById","abNode","calculateTotalChildren","children","total","child","positionNode","level","startAngle","endAngle","centerX","centerY","sort","a","b","localeCompare","angle","radius","Math","cos","sin","childrenWeights","totalChildren","max","totalWeight","reduce","sum","weight","currentAngle","index","childEndAngle","centerDistance","dsChildren","dsChildrenWeights","totalDsWeight","angleRange","PI","abChildren","abChildrenWeights","totalAbWeight","undefined","center","updateNodesVisibility","updateExpandCollapseMarkers","setupTooltips","event","isEdge","animation","eles","play","resizeObserver","ResizeObserver","resize","observe","disconnect","tooltip","document","querySelector","parentNode","removeChild","hasChildren","isNode","isExpanded","has","originalLabel","newLabel","prev","newSet","delete","add","batch","isDSExpanded","isABExpanded","shouldBeVisible","currentParentId","grandParentId","sourceOpacity","parseFloat","targetOpacity","isSourceVisible","isNaN","isTargetVisible","createElement","className","body","appendChild","cleanFieldValue","value","prefix","strValue","String","includes","split","join","trim","_containerRef$current","nodeData","innerHTML","renderedPosition","containerRect","getBoundingClientRect","left","top","tooltipRect","viewportWidth","window","innerWidth","viewportHeight","innerHeight","right","bottom","_containerRef$current2","_jsx","_jsxs","_Fragment","ref"],"sourceRoot":""}